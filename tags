!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACPI_RECLAIMABLE	threads/palloc.c	75;"	d	file:
ACTUAL	tests/vm/child-mm-wrt.c	12;"	d	file:
ACTUAL	tests/vm/mmap-close.c	10;"	d	file:
ACTUAL	tests/vm/mmap-ro.c	10;"	d	file:
ACTUAL	tests/vm/mmap-unmap.c	9;"	d	file:
ACTUAL	tests/vm/mmap-write.c	11;"	d	file:
ACTUAL	tests/vm/mmap-zero-len.c	13;"	d	file:
APPEND_HILO	threads/palloc.c	76;"	d	file:
ARENA_MAGIC	threads/malloc.c	46;"	d	file:
ASSERT	include/lib/debug.h	26;"	d
ASSERT	include/lib/debug.h	30;"	d
ASSERT	include/lib/debug.h	36;"	d
Algorithm::Diff	tests/Algorithm/Diff.pm	/^package Algorithm::Diff;$/;"	p
Algorithm::Diff::_impl	tests/Algorithm/Diff.pm	/^package Algorithm::Diff::_impl;$/;"	p
BASE_MEM_THRESHOLD	threads/palloc.c	73;"	d	file:
BEST_ELEMS_PER_BUCKET	lib/kernel/hash.c	314;"	d	file:
BITMAP_ERROR	include/lib/kernel/bitmap.h	36;"	d
BITMASK	include/threads/vaddr.h	15;"	d
BLOCK_SIZE	tests/filesys/base/lg-random.c	5;"	d	file:
BLOCK_SIZE	tests/filesys/base/lg-seq-block.c	6;"	d	file:
BLOCK_SIZE	tests/filesys/base/sm-random.c	5;"	d	file:
BLOCK_SIZE	tests/filesys/base/sm-seq-block.c	6;"	d	file:
BUF_SIZE	tests/filesys/base/syn-read.h	4;"	d
BUF_SIZE	tests/filesys/base/syn-write.h	6;"	d
BUF_SIZE	tests/filesys/extended/syn-rw.h	6;"	d
BUILD_SUBDIRS	Makefile	/^BUILD_SUBDIRS = threads userprog vm filesys$/;"	m
Base	tests/Algorithm/Diff.pm	/^sub Base$/;"	s
CHANNEL_CNT	devices/disk.c	80;"	d	file:
CHAR	lib/stdio.c	/^		CHAR = 1,               \/* hh *\/$/;"	e	enum:printf_conversion::__anon4	file:
CHAR_BIT	include/lib/limits.h	4;"	d
CHAR_MAX	include/lib/limits.h	12;"	d
CHAR_MAX	include/lib/limits.h	15;"	d
CHAR_MIN	include/lib/limits.h	11;"	d
CHAR_MIN	include/lib/limits.h	14;"	d
CHECK	tests/lib.h	29;"	d
CHILD_CNT	tests/filesys/base/syn-read.c	14;"	d	file:
CHILD_CNT	tests/filesys/base/syn-write.h	4;"	d
CHILD_CNT	tests/filesys/extended/syn-rw.c	12;"	d	file:
CHILD_CNT	tests/userprog/rox-child.c	4;"	d	file:
CHILD_CNT	tests/userprog/rox-multichild.c	4;"	d	file:
CHILD_CNT	tests/vm/page-parallel.c	7;"	d	file:
CHILD_CNT	tests/vm/swap-fork.c	10;"	d	file:
CHUNK_CNT	tests/filesys/extended/syn-rw.h	5;"	d
CHUNK_CNT	tests/vm/page-merge-seq.c	15;"	d	file:
CHUNK_CNT	tests/vm/parallel-merge.c	14;"	d	file:
CHUNK_PAGE_COUNT	tests/vm/lazy-anon.c	11;"	d	file:
CHUNK_SIZE	tests/filesys/base/syn-write.h	5;"	d
CHUNK_SIZE	tests/filesys/extended/syn-rw.h	4;"	d
CHUNK_SIZE	tests/vm/child-swap.c	15;"	d	file:
CHUNK_SIZE	tests/vm/cow/cow-simple.c	11;"	d	file:
CHUNK_SIZE	tests/vm/lazy-anon.c	12;"	d	file:
CHUNK_SIZE	tests/vm/page-merge-seq.c	14;"	d	file:
CHUNK_SIZE	tests/vm/parallel-merge.c	13;"	d	file:
CHUNK_SIZE	tests/vm/swap-anon.c	19;"	d	file:
CHUNK_SIZE	tests/vm/swap-iter.c	15;"	d	file:
CLEAN_SUBDIRS	Makefile	/^CLEAN_SUBDIRS = $(BUILD_SUBDIRS)$/;"	m
CMD_IDENTIFY_DEVICE	devices/disk.c	47;"	d	file:
CMD_READ_SECTOR_RETRY	devices/disk.c	48;"	d	file:
CMD_WRITE_SECTOR_RETRY	devices/disk.c	49;"	d	file:
COL_CNT	devices/vga.c	13;"	d	file:
CR0_EM	threads/loader.S	/^#define CR0_EM 0x00000004      \/* (Floating-point) Emulation. *\/$/;"	d
CR0_PE	threads/loader.S	/^#define CR0_PE 0x00000001      \/* Protection Enable. *\/$/;"	d
CR0_PE	threads/start.S	/^#define CR0_PE 0x00000001$/;"	d
CR0_PG	threads/loader.S	/^#define CR0_PG 0x80000000      \/* Paging. *\/$/;"	d
CR0_PG	threads/start.S	/^#define CR0_PG (1 << 31)$/;"	d
CR0_WP	threads/loader.S	/^#define CR0_WP 0x00010000      \/* Write-Protect enable in kernel mode. *\/$/;"	d
CR4_PAE	threads/start.S	/^#define CR4_PAE 0x20$/;"	d
CTL_SRST	devices/disk.c	37;"	d	file:
Copy	tests/Algorithm/Diff.pm	/^sub Copy$/;"	s
DATA_REG	devices/kbd.c	11;"	d	file:
DATA_SIZE	tests/vm/page-merge-seq.c	16;"	d	file:
DATA_SIZE	tests/vm/parallel-merge.c	15;"	d	file:
DEVICES_DISK_H	include/devices/disk.h	2;"	d
DEVICES_INPUT_H	include/devices/input.h	2;"	d
DEVICES_INTQ_H	include/devices/intq.h	2;"	d
DEVICES_KBD_H	include/devices/kbd.h	2;"	d
DEVICES_SERIAL_H	include/devices/serial.h	2;"	d
DEVICES_TIMER_H	include/devices/timer.h	2;"	d
DEVICES_VGA_H	include/devices/vga.h	2;"	d
DEV_DEV	devices/disk.c	42;"	d	file:
DEV_LBA	devices/disk.c	41;"	d	file:
DEV_MBS	devices/disk.c	40;"	d	file:
DIRECTORY	tests/filesys/extended/grow-dir-lg.c	5;"	d	file:
DISK_SECTOR_SIZE	include/devices/disk.h	8;"	d
DISK_SIZE	tests/filesys/extended/symlink-dir.c	12;"	d	file:
DISK_SIZE	tests/filesys/extended/symlink-file.c	14;"	d	file:
DISK_SIZE	tests/filesys/extended/symlink-link.c	12;"	d	file:
DIV_ROUND_UP	include/lib/round.h	10;"	d
Die	tests/Algorithm/Diff.pm	/^sub Die$/;"	s
Diff	tests/Algorithm/Diff.pm	/^sub Diff {$/;"	s
E820_MAP	include/threads/loader.h	20;"	d
E820_MAP4	include/threads/loader.h	21;"	d
EFER_LME	threads/start.S	/^#define EFER_LME (1 << 8)$/;"	d
EFER_MSR	threads/start.S	/^#define EFER_MSR 0xC0000080$/;"	d
EFER_SCE	threads/start.S	/^#define EFER_SCE (1 << 0)$/;"	d
EI_NIDENT	userprog/process.c	264;"	d	file:
ELEM_BITS	lib/kernel/bitmap.c	22;"	d	file:
ELF	userprog/process.c	310;"	d	file:
ELF64_PHDR	userprog/process.c	/^struct ELF64_PHDR {$/;"	s	file:
ELF64_hdr	userprog/process.c	/^struct ELF64_hdr {$/;"	s	file:
EOChain	include/filesys/fat.h	14;"	d
EXIT_FAILURE	include/lib/user/syscall.h	21;"	d
EXIT_SUCCESS	include/lib/user/syscall.h	20;"	d
EXPECTED_DEPTH_TO_PASS	tests/userprog/no-vm/multi-oom.c	/^static const int EXPECTED_DEPTH_TO_PASS = 10;$/;"	v	file:
EXPECTED_REPETITIONS	tests/userprog/no-vm/multi-oom.c	/^static const int EXPECTED_REPETITIONS = 10;$/;"	v	file:
FAT_BOOT_SECTOR	include/filesys/fat.h	18;"	d
FAT_MAGIC	include/filesys/fat.h	13;"	d
FCR_REG	devices/serial.c	31;"	d	file:
FILESYS_DIRECTORY_H	include/filesys/directory.h	2;"	d
FILESYS_FAT_H	include/filesys/fat.h	2;"	d
FILESYS_FILESYS_H	include/filesys/filesys.h	2;"	d
FILESYS_FILE_H	include/filesys/file.h	2;"	d
FILESYS_FREE_MAP_H	include/filesys/free-map.h	2;"	d
FILESYS_FSUTIL_H	include/filesys/fsutil.h	2;"	d
FILESYS_INODE_H	include/filesys/inode.h	2;"	d
FILESYS_OFF_T_H	include/filesys/off_t.h	2;"	d
FILESYS_PAGE_CACHE_H	include/filesys/page_cache.h	2;"	d
FILE_CNT	tests/filesys/extended/grow-dir-lg.c	4;"	d	file:
FILE_CNT	tests/filesys/extended/grow-root-lg.c	3;"	d	file:
FILE_CNT	tests/filesys/extended/grow-root-sm.c	3;"	d	file:
FILE_SIZE	tests/filesys/extended/grow-two-files.c	9;"	d	file:
FILE_SIZE	tests/filesys/extended/symlink-dir.c	9;"	d	file:
FILE_SIZE	tests/filesys/extended/symlink-file.c	10;"	d	file:
FILE_SIZE	tests/filesys/extended/symlink-link.c	9;"	d	file:
FLAG_AC	include/threads/flags.h	9;"	d
FLAG_DF	include/threads/flags.h	7;"	d
FLAG_IF	include/threads/flags.h	6;"	d
FLAG_IOPL	include/threads/flags.h	8;"	d
FLAG_MBS	include/threads/flags.h	4;"	d
FLAG_NT	include/threads/flags.h	10;"	d
FLAG_TF	include/threads/flags.h	5;"	d
FNV_64_BASIS	lib/kernel/hash.c	240;"	d	file:
FNV_64_PRIME	lib/kernel/hash.c	239;"	d	file:
FREE_MAP_SECTOR	include/filesys/filesys.h	8;"	d
GRAY_ON_BLACK	devices/vga.c	21;"	d	file:
GROUP	lib/stdio.c	/^		GROUP = 1 << 5          \/* '\\'' *\/$/;"	e	enum:printf_conversion::__anon3	file:
Get	tests/Algorithm/Diff.pm	/^sub Get$/;"	s
IER_RECV	devices/serial.c	37;"	d	file:
IER_REG	devices/serial.c	23;"	d	file:
IER_XMIT	devices/serial.c	38;"	d	file:
IIR_REG	devices/serial.c	30;"	d	file:
INODE_MAGIC	filesys/inode.c	11;"	d	file:
INT	lib/stdio.c	/^		INT = 3,                \/* (none) *\/$/;"	e	enum:printf_conversion::__anon4	file:
INT16_MAX	include/lib/stdint.h	9;"	d
INT16_MIN	include/lib/stdint.h	10;"	d
INT32_MAX	include/lib/stdint.h	13;"	d
INT32_MIN	include/lib/stdint.h	14;"	d
INT64_MAX	include/lib/stdint.h	17;"	d
INT64_MIN	include/lib/stdint.h	18;"	d
INT8_MAX	include/lib/stdint.h	5;"	d
INT8_MIN	include/lib/stdint.h	6;"	d
INTMAX	lib/stdio.c	/^		INTMAX = 4,             \/* j *\/$/;"	e	enum:printf_conversion::__anon4	file:
INTMAX_MAX	include/lib/stdint.h	41;"	d
INTMAX_MIN	include/lib/stdint.h	40;"	d
INTPTR_MAX	include/lib/stdint.h	34;"	d
INTPTR_MIN	include/lib/stdint.h	33;"	d
INTQ_BUFSIZE	include/devices/intq.h	21;"	d
INTR_CNT	threads/interrupt.c	19;"	d	file:
INTR_OFF	include/threads/interrupt.h	/^	INTR_OFF,             \/* Interrupts disabled. *\/$/;"	e	enum:intr_level
INTR_ON	include/threads/interrupt.h	/^	INTR_ON               \/* Interrupts enabled. *\/$/;"	e	enum:intr_level
INT_MAX	include/lib/limits.h	22;"	d
INT_MIN	include/lib/limits.h	23;"	d
IO_BASE	devices/serial.c	18;"	d	file:
ITER_CNT	tests/threads/priority-fifo.c	27;"	d	file:
Items	tests/Algorithm/Diff.pm	/^sub Items {$/;"	s
KERN_BASE	include/threads/vaddr.h	35;"	d
LCR_DLAB	devices/serial.c	42;"	d	file:
LCR_N81	devices/serial.c	41;"	d	file:
LCR_REG	devices/serial.c	32;"	d	file:
LCS	tests/Algorithm/Diff.pm	/^sub LCS$/;"	s
LCS_length	tests/Algorithm/Diff.pm	/^sub LCS_length$/;"	s
LCSidx	tests/Algorithm/Diff.pm	/^sub LCSidx$/;"	s
LLONG_MAX	include/lib/limits.h	30;"	d
LLONG_MIN	include/lib/limits.h	31;"	d
LOADER_ARGS	include/threads/loader.h	25;"	d
LOADER_ARGS_LEN	include/threads/loader.h	30;"	d
LOADER_ARG_CNT	include/threads/loader.h	26;"	d
LOADER_ARG_CNT_LEN	include/threads/loader.h	31;"	d
LOADER_BASE	include/threads/loader.h	5;"	d
LOADER_END	include/threads/loader.h	6;"	d
LOADER_KERN_BASE	include/threads/loader.h	9;"	d
LOADER_PHYS_BASE	include/threads/loader.h	12;"	d
LOADER_SIG	include/threads/loader.h	24;"	d
LOADER_SIG_LEN	include/threads/loader.h	29;"	d
LONG	lib/stdio.c	/^		LONG = 5,               \/* l *\/$/;"	e	enum:printf_conversion::__anon4	file:
LONGLONG	lib/stdio.c	/^		LONGLONG = 6,           \/* ll *\/$/;"	e	enum:printf_conversion::__anon4	file:
LONG_MAX	include/lib/limits.h	26;"	d
LONG_MIN	include/lib/limits.h	27;"	d
LONG_MODE	threads/start.S	/^#define LONG_MODE (1 << 29)$/;"	d
LSR_DR	devices/serial.c	48;"	d	file:
LSR_REG	devices/serial.c	34;"	d	file:
LSR_THRE	devices/serial.c	49;"	d	file:
LS_REG	devices/serial.c	26;"	d	file:
MAP_FAILED	include/lib/user/syscall.h	14;"	d
MAX_CNT	tests/internal/stdlib.c	19;"	d	file:
MAX_ELEMS_PER_BUCKET	lib/kernel/hash.c	315;"	d	file:
MAX_FILE_NR	tests/filesys/extended/symlink-dir.c	13;"	d	file:
MAX_FILE_NR	tests/filesys/extended/symlink-file.c	15;"	d	file:
MAX_FILE_NR	tests/filesys/extended/symlink-link.c	13;"	d	file:
MAX_SIZE	tests/internal/list.c	19;"	d	file:
MAX_THREAD_CNT	tests/threads/mlfqs/mlfqs-fair.c	54;"	d	file:
MCR_OUT2	devices/serial.c	45;"	d	file:
MCR_REG	devices/serial.c	33;"	d	file:
MINUS	lib/stdio.c	/^		MINUS = 1 << 0,         \/* '-' *\/$/;"	e	enum:printf_conversion::__anon3	file:
MIN_ELEMS_PER_BUCKET	lib/kernel/hash.c	313;"	d	file:
MSR_LSTAR	userprog/syscall.c	24;"	d	file:
MSR_STAR	userprog/syscall.c	23;"	d	file:
MSR_SYSCALL_MASK	userprog/syscall.c	25;"	d	file:
MS_REG	devices/serial.c	27;"	d	file:
MULTIBOOT_FLAG	include/threads/loader.h	16;"	d
MULTIBOOT_INFO	include/threads/loader.h	15;"	d
MULTIBOOT_MMAP_ADDR	include/threads/loader.h	18;"	d
MULTIBOOT_MMAP_LEN	include/threads/loader.h	17;"	d
Max	tests/Algorithm/Diff.pm	/^sub Max {$/;"	s
Min	tests/Algorithm/Diff.pm	/^sub Min {$/;"	s
NAME_MAX	include/filesys/directory.h	12;"	d
NDEBUG	tests/internal/list.c	10;"	d	file:
NDEBUG	tests/internal/stdio.c	10;"	d	file:
NDEBUG	tests/internal/stdlib.c	10;"	d	file:
NESTING_DEPTH	tests/threads/priority-donate-chain.c	33;"	d	file:
NOT_REACHED	include/lib/debug.h	27;"	d
NOT_REACHED	include/lib/debug.h	34;"	d
NOT_REACHED	include/lib/debug.h	37;"	d
NO_INLINE	include/lib/debug.h	9;"	d
NO_RETURN	include/lib/debug.h	8;"	d
NULL	include/lib/stddef.h	4;"	d
Next	tests/Algorithm/Diff.pm	/^sub Next {$/;"	s
ONE_MB	tests/vm/child-swap.c	14;"	d	file:
ONE_MB	tests/vm/swap-anon.c	18;"	d	file:
ONE_MB	tests/vm/swap-iter.c	14;"	d	file:
Options	utils/pintos-mkdisk	/^Options:$/;"	l
PAGE_ALIGN_CEIL	tests/vm/lazy-file.c	13;"	d	file:
PAGE_COUNT	tests/vm/child-swap.c	16;"	d	file:
PAGE_COUNT	tests/vm/swap-anon.c	20;"	d	file:
PAGE_COUNT	tests/vm/swap-iter.c	16;"	d	file:
PAGE_SHIFT	tests/vm/child-swap.c	12;"	d	file:
PAGE_SHIFT	tests/vm/lazy-file.c	12;"	d	file:
PAGE_SHIFT	tests/vm/swap-anon.c	16;"	d	file:
PAGE_SHIFT	tests/vm/swap-iter.c	12;"	d	file:
PAGE_SIZE	tests/vm/child-swap.c	13;"	d	file:
PAGE_SIZE	tests/vm/lazy-anon.c	10;"	d	file:
PAGE_SIZE	tests/vm/lazy-file.c	11;"	d	file:
PAGE_SIZE	tests/vm/swap-anon.c	17;"	d	file:
PAGE_SIZE	tests/vm/swap-iter.c	13;"	d	file:
PAL_ASSERT	include/threads/palloc.h	/^	PAL_ASSERT = 001,           \/* Panic on failure. *\/$/;"	e	enum:palloc_flags
PAL_USER	include/threads/palloc.h	/^	PAL_USER = 004              \/* User page. *\/$/;"	e	enum:palloc_flags
PAL_ZERO	include/threads/palloc.h	/^	PAL_ZERO = 002,             \/* Zero page contents. *\/$/;"	e	enum:palloc_flags
PANIC	include/lib/debug.h	14;"	d
PDPE	include/threads/pte.h	26;"	d
PDPESHIFT	include/threads/pte.h	21;"	d
PDX	include/threads/pte.h	27;"	d
PDXSHIFT	include/threads/pte.h	22;"	d
PF_P	include/userprog/exception.h	5;"	d
PF_R	userprog/process.c	277;"	d	file:
PF_U	include/userprog/exception.h	7;"	d
PF_W	include/userprog/exception.h	6;"	d
PF_W	userprog/process.c	276;"	d	file:
PF_X	userprog/process.c	275;"	d	file:
PGBITS	include/threads/vaddr.h	19;"	d
PGMASK	include/threads/vaddr.h	21;"	d
PGSHIFT	include/threads/vaddr.h	18;"	d
PGSIZE	include/threads/vaddr.h	20;"	d
PID_ERROR	include/lib/user/syscall.h	10;"	d
PLUS	lib/stdio.c	/^		PLUS = 1 << 1,          \/* '+' *\/$/;"	e	enum:printf_conversion::__anon3	file:
PML4	include/threads/pte.h	25;"	d
PML4SHIFT	include/threads/pte.h	20;"	d
POLL	devices/serial.c	/^static enum { UNINIT, POLL, QUEUE } mode;$/;"	e	enum:__anon5	file:
POUND	lib/stdio.c	/^		POUND = 1 << 3,         \/* '#' *\/$/;"	e	enum:printf_conversion::__anon3	file:
PRDSNu	include/devices/disk.h	16;"	d
PRINTF_FORMAT	include/lib/debug.h	10;"	d
PRIX16	include/lib/inttypes.h	18;"	d
PRIX32	include/lib/inttypes.h	25;"	d
PRIX64	include/lib/inttypes.h	32;"	d
PRIX8	include/lib/inttypes.h	11;"	d
PRIXMAX	include/lib/inttypes.h	39;"	d
PRIXPTR	include/lib/inttypes.h	46;"	d
PRI_DEFAULT	include/threads/thread.h	28;"	d
PRI_MAX	include/threads/thread.h	29;"	d
PRI_MIN	include/threads/thread.h	27;"	d
PRId16	include/lib/inttypes.h	13;"	d
PRId32	include/lib/inttypes.h	20;"	d
PRId64	include/lib/inttypes.h	27;"	d
PRId8	include/lib/inttypes.h	6;"	d
PRIdMAX	include/lib/inttypes.h	34;"	d
PRIdPTR	include/lib/inttypes.h	41;"	d
PRIi16	include/lib/inttypes.h	14;"	d
PRIi32	include/lib/inttypes.h	21;"	d
PRIi64	include/lib/inttypes.h	28;"	d
PRIi8	include/lib/inttypes.h	7;"	d
PRIiMAX	include/lib/inttypes.h	35;"	d
PRIiPTR	include/lib/inttypes.h	42;"	d
PRIo16	include/lib/inttypes.h	15;"	d
PRIo32	include/lib/inttypes.h	22;"	d
PRIo64	include/lib/inttypes.h	29;"	d
PRIo8	include/lib/inttypes.h	8;"	d
PRIoMAX	include/lib/inttypes.h	36;"	d
PRIoPTR	include/lib/inttypes.h	43;"	d
PRIu16	include/lib/inttypes.h	16;"	d
PRIu32	include/lib/inttypes.h	23;"	d
PRIu64	include/lib/inttypes.h	30;"	d
PRIu8	include/lib/inttypes.h	9;"	d
PRIuMAX	include/lib/inttypes.h	37;"	d
PRIuPTR	include/lib/inttypes.h	44;"	d
PRIx16	include/lib/inttypes.h	17;"	d
PRIx32	include/lib/inttypes.h	24;"	d
PRIx64	include/lib/inttypes.h	31;"	d
PRIx8	include/lib/inttypes.h	10;"	d
PRIxMAX	include/lib/inttypes.h	38;"	d
PRIxPTR	include/lib/inttypes.h	45;"	d
PROTd	include/filesys/off_t.h	13;"	d
PTE_A	include/threads/pte.h	42;"	d
PTE_ADDR	include/threads/pte.h	29;"	d
PTE_ADDR_MASK	include/threads/pte.h	37;"	d
PTE_AVL	include/threads/pte.h	38;"	d
PTE_D	include/threads/pte.h	43;"	d
PTE_FLAGS	include/threads/pte.h	36;"	d
PTE_P	include/threads/pte.h	39;"	d
PTE_P	threads/start.S	/^#define PTE_P 0x1$/;"	d
PTE_U	include/threads/pte.h	41;"	d
PTE_W	include/threads/pte.h	40;"	d
PTE_W	threads/start.S	/^#define PTE_W 0x2$/;"	d
PTRDIFFT	lib/stdio.c	/^		PTRDIFFT = 7,           \/* t *\/$/;"	e	enum:printf_conversion::__anon4	file:
PTRDIFF_MAX	include/lib/stdint.h	47;"	d
PTRDIFF_MIN	include/lib/stdint.h	46;"	d
PTX	include/threads/pte.h	28;"	d
PTXSHIFT	include/threads/pte.h	23;"	d
PT_DYNAMIC	userprog/process.c	268;"	d	file:
PT_INTERP	userprog/process.c	269;"	d	file:
PT_LOAD	userprog/process.c	267;"	d	file:
PT_NOTE	userprog/process.c	270;"	d	file:
PT_NULL	userprog/process.c	266;"	d	file:
PT_PHDR	userprog/process.c	272;"	d	file:
PT_SHLIB	userprog/process.c	271;"	d	file:
PT_STACK	userprog/process.c	273;"	d	file:
Phdr	userprog/process.c	311;"	d	file:
Prev	tests/Algorithm/Diff.pm	/^sub Prev {$/;"	s
QUEUE	devices/serial.c	/^static enum { UNINIT, POLL, QUEUE } mode;$/;"	e	enum:__anon5	file:
R	include/threads/interrupt.h	/^	struct gp_registers R;$/;"	m	struct:intr_frame	typeref:struct:intr_frame::gp_registers
RBR_REG	devices/serial.c	21;"	d	file:
READDIR_MAX_LEN	include/lib/user/syscall.h	17;"	d
REAL	threads/intr-stubs.S	/^#define REAL$/;"	d
RELOC	threads/start.S	/^#define RELOC(x) (x - LOADER_KERN_BASE)$/;"	d
ROOT_DIR_CLUSTER	include/filesys/fat.h	19;"	d
ROOT_DIR_SECTOR	include/filesys/filesys.h	9;"	d
ROUND_DOWN	include/lib/round.h	14;"	d
ROUND_UP	include/lib/round.h	6;"	d
ROW_CNT	devices/vga.c	14;"	d	file:
Range	tests/Algorithm/Diff.pm	/^sub Range {$/;"	s
Reset	tests/Algorithm/Diff.pm	/^sub Reset$/;"	s
SCHAR_MAX	include/lib/limits.h	6;"	d
SCHAR_MIN	include/lib/limits.h	7;"	d
SECTORS_PER_CLUSTER	include/filesys/fat.h	17;"	d
SEG64	userprog/gdt.c	59;"	d	file:
SEL_CNT	include/threads/loader.h	41;"	d
SEL_KCSEG	include/threads/loader.h	36;"	d
SEL_KDSEG	include/threads/loader.h	37;"	d
SEL_NULL	include/threads/loader.h	35;"	d
SEL_TSS	include/threads/loader.h	40;"	d
SEL_UCSEG	include/threads/loader.h	39;"	d
SEL_UDSEG	include/threads/loader.h	38;"	d
SHORT	lib/stdio.c	/^		SHORT = 2,              \/* h *\/$/;"	e	enum:printf_conversion::__anon4	file:
SHRT_MAX	include/lib/limits.h	18;"	d
SHRT_MIN	include/lib/limits.h	19;"	d
SIZE	tests/vm/child-linear.c	12;"	d	file:
SIZE	tests/vm/mmap-shuffle.c	12;"	d	file:
SIZE	tests/vm/page-linear.c	9;"	d	file:
SIZE	tests/vm/page-shuffle.c	10;"	d	file:
SIZET	lib/stdio.c	/^		SIZET = 8               \/* z *\/$/;"	e	enum:printf_conversion::__anon4	file:
SIZE_MAX	include/lib/stdint.h	49;"	d
SPACE	lib/stdio.c	/^		SPACE = 1 << 2,         \/* ' ' *\/$/;"	e	enum:printf_conversion::__anon3	file:
STA_BSY	devices/disk.c	32;"	d	file:
STA_DRDY	devices/disk.c	33;"	d	file:
STA_DRQ	devices/disk.c	34;"	d	file:
STDIN_FILENO	include/lib/stdio.h	15;"	d
STDOUT_FILENO	include/lib/stdio.h	16;"	d
STUB	threads/intr-stubs.S	/^#define STUB(NUMBER, TYPE)                      \\$/;"	d
SYS_CHDIR	include/lib/syscall-nr.h	/^	SYS_CHDIR,                  \/* Change the current directory. *\/$/;"	e	enum:__anon2
SYS_CLOSE	include/lib/syscall-nr.h	/^	SYS_CLOSE,                  \/* Close a file. *\/$/;"	e	enum:__anon2
SYS_CREATE	include/lib/syscall-nr.h	/^	SYS_CREATE,                 \/* Create a file. *\/$/;"	e	enum:__anon2
SYS_DUP2	include/lib/syscall-nr.h	/^	SYS_DUP2,                   \/* Duplicate the file descriptor *\/$/;"	e	enum:__anon2
SYS_EXEC	include/lib/syscall-nr.h	/^	SYS_EXEC,                   \/* Switch current process. *\/$/;"	e	enum:__anon2
SYS_EXIT	include/lib/syscall-nr.h	/^	SYS_EXIT,                   \/* Terminate this process. *\/$/;"	e	enum:__anon2
SYS_FILESIZE	include/lib/syscall-nr.h	/^	SYS_FILESIZE,               \/* Obtain a file's size. *\/$/;"	e	enum:__anon2
SYS_FORK	include/lib/syscall-nr.h	/^	SYS_FORK,                   \/* Clone current process. *\/$/;"	e	enum:__anon2
SYS_HALT	include/lib/syscall-nr.h	/^	SYS_HALT,                   \/* Halt the operating system. *\/$/;"	e	enum:__anon2
SYS_INUMBER	include/lib/syscall-nr.h	/^	SYS_INUMBER,                \/* Returns the inode number for a fd. *\/$/;"	e	enum:__anon2
SYS_ISDIR	include/lib/syscall-nr.h	/^	SYS_ISDIR,                  \/* Tests if a fd represents a directory. *\/$/;"	e	enum:__anon2
SYS_MKDIR	include/lib/syscall-nr.h	/^	SYS_MKDIR,                  \/* Create a directory. *\/$/;"	e	enum:__anon2
SYS_MMAP	include/lib/syscall-nr.h	/^	SYS_MMAP,                   \/* Map a file into memory. *\/$/;"	e	enum:__anon2
SYS_MOUNT	include/lib/syscall-nr.h	/^	SYS_MOUNT,$/;"	e	enum:__anon2
SYS_MUNMAP	include/lib/syscall-nr.h	/^	SYS_MUNMAP,                 \/* Remove a memory mapping. *\/$/;"	e	enum:__anon2
SYS_OPEN	include/lib/syscall-nr.h	/^	SYS_OPEN,                   \/* Open a file. *\/$/;"	e	enum:__anon2
SYS_READ	include/lib/syscall-nr.h	/^	SYS_READ,                   \/* Read from a file. *\/$/;"	e	enum:__anon2
SYS_READDIR	include/lib/syscall-nr.h	/^	SYS_READDIR,                \/* Reads a directory entry. *\/$/;"	e	enum:__anon2
SYS_REMOVE	include/lib/syscall-nr.h	/^	SYS_REMOVE,                 \/* Delete a file. *\/$/;"	e	enum:__anon2
SYS_SEEK	include/lib/syscall-nr.h	/^	SYS_SEEK,                   \/* Change position in a file. *\/$/;"	e	enum:__anon2
SYS_SYMLINK	include/lib/syscall-nr.h	/^	SYS_SYMLINK,                \/* Returns the inode number for a fd. *\/$/;"	e	enum:__anon2
SYS_TELL	include/lib/syscall-nr.h	/^	SYS_TELL,                   \/* Report current position in a file. *\/$/;"	e	enum:__anon2
SYS_UMOUNT	include/lib/syscall-nr.h	/^	SYS_UMOUNT,$/;"	e	enum:__anon2
SYS_WAIT	include/lib/syscall-nr.h	/^	SYS_WAIT,                   \/* Wait for a child process to die. *\/$/;"	e	enum:__anon2
SYS_WRITE	include/lib/syscall-nr.h	/^	SYS_WRITE,                  \/* Write to a file. *\/$/;"	e	enum:__anon2
Same	tests/Algorithm/Diff.pm	/^sub Same {$/;"	s
TAGS_SOURCES	Makefile	/^TAGS_SOURCES = find $(TAGS_SUBDIRS) -name \\*.[chS] -print$/;"	m
TAGS_SUBDIRS	Makefile	/^TAGS_SUBDIRS = $(BUILD_SUBDIRS) devices lib include$/;"	m
TAR_PATH	Makefile	/^TAR_PATH := team${TEAM}.tar.gz$/;"	m
TESTS_ARC4_H	tests/arc4.h	2;"	d
TESTS_CKSUM_H	tests/cksum.h	2;"	d
TESTS_FILESYS_BASE_SYN_READ_H	tests/filesys/base/syn-read.h	2;"	d
TESTS_FILESYS_BASE_SYN_WRITE_H	tests/filesys/base/syn-write.h	2;"	d
TESTS_FILESYS_EXTENDED_MK_TREE_H	tests/filesys/extended/mk-tree.h	2;"	d
TESTS_FILESYS_EXTENDED_SYN_RW_H	tests/filesys/extended/syn-rw.h	2;"	d
TESTS_FILESYS_SEQ_TEST_H	tests/filesys/seq-test.h	2;"	d
TESTS_LIB_H	tests/lib.h	2;"	d
TESTS_MAIN_H	tests/main.h	2;"	d
TESTS_THREADS_TESTS_H	tests/threads/tests.h	2;"	d
TESTS_USERPROG_BOUNDARY_H	tests/userprog/boundary.h	2;"	d
TESTS_VM_PARALLEL_MERGE	tests/vm/parallel-merge.h	2;"	d
TESTS_VM_QSORT_H	tests/vm/qsort.h	2;"	d
TEST_SIZE	tests/filesys/base/lg-create.c	4;"	d	file:
TEST_SIZE	tests/filesys/base/lg-full.c	5;"	d	file:
TEST_SIZE	tests/filesys/base/lg-random.c	6;"	d	file:
TEST_SIZE	tests/filesys/base/lg-seq-block.c	5;"	d	file:
TEST_SIZE	tests/filesys/base/lg-seq-random.c	5;"	d	file:
TEST_SIZE	tests/filesys/base/sm-create.c	4;"	d	file:
TEST_SIZE	tests/filesys/base/sm-full.c	5;"	d	file:
TEST_SIZE	tests/filesys/base/sm-random.c	6;"	d	file:
TEST_SIZE	tests/filesys/base/sm-seq-block.c	5;"	d	file:
TEST_SIZE	tests/filesys/base/sm-seq-random.c	5;"	d	file:
TEST_SIZE	tests/filesys/extended/grow-create.c	3;"	d	file:
TEST_SIZE	tests/filesys/extended/grow-seq-lg.c	4;"	d	file:
TEST_SIZE	tests/filesys/extended/grow-seq-sm.c	4;"	d	file:
THREADS_FLAGS_H	include/threads/flags.h	2;"	d
THREADS_INIT_H	include/threads/init.h	2;"	d
THREADS_INTERRUPT_H	include/threads/interrupt.h	2;"	d
THREADS_INTR_STUBS_H	include/threads/intr-stubs.h	2;"	d
THREADS_IO_H	include/threads/io.h	42;"	d
THREADS_LOADER_H	include/threads/loader.h	2;"	d
THREADS_MALLOC_H	include/threads/malloc.h	2;"	d
THREADS_PALLOC_H	include/threads/palloc.h	2;"	d
THREADS_PTE_H	include/threads/pte.h	2;"	d
THREADS_SYNCH_H	include/threads/synch.h	2;"	d
THREADS_THREAD_H	include/threads/thread.h	2;"	d
THREADS_VADDR_H	include/threads/vaddr.h	2;"	d
THREAD_BASIC	threads/thread.c	25;"	d	file:
THREAD_BLOCKED	include/threads/thread.h	/^	THREAD_BLOCKED,     \/* Waiting for an event to trigger. *\/$/;"	e	enum:thread_status
THREAD_CNT	tests/threads/mlfqs/mlfqs-load-60.c	112;"	d	file:
THREAD_CNT	tests/threads/mlfqs/mlfqs-load-avg.c	123;"	d	file:
THREAD_CNT	tests/threads/priority-fifo.c	26;"	d	file:
THREAD_DYING	include/threads/thread.h	/^	THREAD_DYING        \/* About to be destroyed. *\/$/;"	e	enum:thread_status
THREAD_MAGIC	threads/thread.c	21;"	d	file:
THREAD_MMU_H	include/threads/mmu.h	2;"	d
THREAD_READY	include/threads/thread.h	/^	THREAD_READY,       \/* Not running but ready to run. *\/$/;"	e	enum:thread_status
THREAD_RUNNING	include/threads/thread.h	/^	THREAD_RUNNING,     \/* Running thread. *\/$/;"	e	enum:thread_status
THR_REG	devices/serial.c	22;"	d	file:
TID_ERROR	include/threads/thread.h	24;"	d
TIMER_FREQ	include/devices/timer.h	8;"	d
TIME_SLICE	threads/thread.c	49;"	d	file:
UCHAR_MAX	include/lib/limits.h	8;"	d
UINT16_MAX	include/lib/stdint.h	24;"	d
UINT32_MAX	include/lib/stdint.h	27;"	d
UINT64_MAX	include/lib/stdint.h	30;"	d
UINT8_MAX	include/lib/stdint.h	21;"	d
UINTMAX_MAX	include/lib/stdint.h	44;"	d
UINTPTR_MAX	include/lib/stdint.h	37;"	d
UINT_MAX	include/lib/limits.h	24;"	d
ULLONG_MAX	include/lib/limits.h	32;"	d
ULONG_MAX	include/lib/limits.h	28;"	d
UNINIT	devices/serial.c	/^static enum { UNINIT, POLL, QUEUE } mode;$/;"	e	enum:__anon5	file:
UNUSED	include/lib/debug.h	7;"	d
USABLE	threads/palloc.c	74;"	d	file:
USERPROG_EXCEPTION_H	include/userprog/exception.h	2;"	d
USERPROG_GDT_H	include/userprog/gdt.h	2;"	d
USERPROG_PROCESS_H	include/userprog/process.h	2;"	d
USERPROG_SYSCALL_H	include/userprog/syscall.h	2;"	d
USERPROG_TSS_H	include/userprog/tss.h	2;"	d
USER_STACK	include/threads/vaddr.h	38;"	d
USHRT_MAX	include/lib/limits.h	20;"	d
Usage	utils/pintos-mkdisk	/^Usage: pintos DISKFILE MB$/;"	l
VM_ANON	include/vm/vm.h	/^	VM_ANON = 1,$/;"	e	enum:vm_type
VM_ANON_H	include/vm/anon.h	2;"	d
VM_FILE	include/vm/vm.h	/^	VM_FILE = 2,$/;"	e	enum:vm_type
VM_FILE_H	include/vm/file.h	2;"	d
VM_MARKER_0	include/vm/vm.h	/^	VM_MARKER_0 = (1 << 3),$/;"	e	enum:vm_type
VM_MARKER_1	include/vm/vm.h	/^	VM_MARKER_1 = (1 << 4),$/;"	e	enum:vm_type
VM_MARKER_END	include/vm/vm.h	/^	VM_MARKER_END = (1 << 31),$/;"	e	enum:vm_type
VM_PAGE_CACHE	include/vm/vm.h	/^	VM_PAGE_CACHE = 3,$/;"	e	enum:vm_type
VM_TYPE	include/vm/vm.h	37;"	d
VM_UNINIT	include/vm/vm.h	/^	VM_UNINIT = 0,$/;"	e	enum:vm_type
VM_UNINIT_H	include/vm/uninit.h	2;"	d
VM_VM_H	include/vm/vm.h	2;"	d
ZERO	lib/stdio.c	/^		ZERO = 1 << 4,          \/* '0' *\/$/;"	e	enum:printf_conversion::__anon3	file:
_Base	tests/Algorithm/Diff.pm	/^sub _Base() { 5 } # $me->[_Base]: Added to range's min and max$/;"	s
_ChkPos	tests/Algorithm/Diff.pm	/^sub _ChkPos$/;"	s
_ChkSeq	tests/Algorithm/Diff.pm	/^sub _ChkSeq$/;"	s
_End	tests/Algorithm/Diff.pm	/^sub _End()  { 3 } # $me->[_End]: Diff between forward and reverse pos$/;"	s
_Idx	tests/Algorithm/Diff.pm	/^sub _Idx()  { 0 } # $me->[_Idx]: Ref to array of hunk indices$/;"	s
_Min	tests/Algorithm/Diff.pm	/^sub _Min() { -2 } # Added to _Off to get min instead of max+1$/;"	s
_Off	tests/Algorithm/Diff.pm	/^sub _Off()  { 7 } # $me->[_Off]: Offset into _Idx for current position$/;"	s
_Pos	tests/Algorithm/Diff.pm	/^sub _Pos()  { 6 } # $me->[_Pos]: Which hunk is currently selected$/;"	s
_Same	tests/Algorithm/Diff.pm	/^sub _Same() { 4 } # $me->[_Same]: 1 if pos 1 contains unchanged items$/;"	s
_VM_INSPECT_H_	include/vm/inspect.h	2;"	d
__LIB_CTYPE_H	include/lib/ctype.h	2;"	d
__LIB_DEBUG_H	include/lib/debug.h	2;"	d
__LIB_INTTYPES_H	include/lib/inttypes.h	2;"	d
__LIB_KERNEL_BITMAP_H	include/lib/kernel/bitmap.h	2;"	d
__LIB_KERNEL_CONSOLE_H	include/lib/kernel/console.h	2;"	d
__LIB_KERNEL_HASH_H	include/lib/kernel/hash.h	2;"	d
__LIB_KERNEL_LIST_H	include/lib/kernel/list.h	2;"	d
__LIB_KERNEL_STDIO_H	include/lib/kernel/stdio.h	2;"	d
__LIB_LIMITS_H	include/lib/limits.h	2;"	d
__LIB_RANDOM_H	include/lib/random.h	2;"	d
__LIB_ROUND_H	include/lib/round.h	2;"	d
__LIB_STDARG_H	include/lib/stdarg.h	2;"	d
__LIB_STDBOOL_H	include/lib/stdbool.h	2;"	d
__LIB_STDDEF_H	include/lib/stddef.h	2;"	d
__LIB_STDINT_H	include/lib/stdint.h	2;"	d
__LIB_STDIO_H	include/lib/stdio.h	2;"	d
__LIB_STDLIB_H	include/lib/stdlib.h	2;"	d
__LIB_STRING_H	include/lib/string.h	2;"	d
__LIB_SYSCALL_NR_H	include/lib/syscall-nr.h	2;"	d
__LIB_USER_STDIO_H	include/lib/user/stdio.h	2;"	d
__LIB_USER_SYSCALL_H	include/lib/user/syscall.h	2;"	d
__bool_true_false_are_defined	include/lib/stdbool.h	7;"	d
__divdi3	lib/arithmetic.c	/^__divdi3 (long long n, long long d) {$/;"	f
__do_fork	userprog/process.c	/^__do_fork (void *aux) {$/;"	f	file:
__moddi3	lib/arithmetic.c	/^__moddi3 (long long n, long long d) {$/;"	f
__pad1	include/threads/interrupt.h	/^	uint16_t __pad1;$/;"	m	struct:intr_frame
__pad2	include/threads/interrupt.h	/^	uint32_t __pad2;$/;"	m	struct:intr_frame
__pad3	include/threads/interrupt.h	/^	uint16_t __pad3;$/;"	m	struct:intr_frame
__pad4	include/threads/interrupt.h	/^	uint32_t __pad4;$/;"	m	struct:intr_frame
__pad5	include/threads/interrupt.h	/^	uint16_t __pad5;$/;"	m	struct:intr_frame
__pad6	include/threads/interrupt.h	/^	uint32_t __pad6;$/;"	m	struct:intr_frame
__pad7	include/threads/interrupt.h	/^	uint16_t __pad7;$/;"	m	struct:intr_frame
__pad8	include/threads/interrupt.h	/^	uint32_t __pad8;$/;"	m	struct:intr_frame
__printf	lib/stdio.c	/^__printf (const char *format,$/;"	f
__udivdi3	lib/arithmetic.c	/^__udivdi3 (unsigned long long n, unsigned long long d) {$/;"	f
__umoddi3	lib/arithmetic.c	/^__umoddi3 (unsigned long long n, unsigned long long d) {$/;"	f
__unused	threads/palloc.c	/^	uint32_t __unused[8];$/;"	m	struct:multiboot_info	file:
__vprintf	lib/stdio.c	/^__vprintf (const char *format, va_list args,$/;"	f
_longestCommonSubsequence	tests/Algorithm/Diff.pm	/^sub _longestCommonSubsequence$/;"	s
_replaceNextLargerWith	tests/Algorithm/Diff.pm	/^sub _replaceNextLargerWith$/;"	s
_start	lib/user/entry.c	/^_start (int argc, char *argv[]) {$/;"	f
_start	threads/start.S	/^_start = RELOC(bootstrap)$/;"	d
_withPositionsOfInInterval	tests/Algorithm/Diff.pm	/^sub _withPositionsOfInInterval$/;"	s
a	tests/threads/priority-donate-nest.c	/^    struct lock *a;$/;"	m	struct:locks	typeref:struct:locks::lock	file:
a_thread_func	tests/threads/priority-donate-multiple.c	/^a_thread_func (void *lock_) $/;"	f	file:
a_thread_func	tests/threads/priority-donate-multiple.c	/^static thread_func a_thread_func;$/;"	v	file:
a_thread_func	tests/threads/priority-donate-multiple2.c	/^a_thread_func (void *lock_) $/;"	f	file:
a_thread_func	tests/threads/priority-donate-multiple2.c	/^static thread_func a_thread_func;$/;"	v	file:
acquire1_thread_func	tests/threads/priority-donate-one.c	/^acquire1_thread_func (void *lock_) $/;"	f	file:
acquire1_thread_func	tests/threads/priority-donate-one.c	/^static thread_func acquire1_thread_func;$/;"	v	file:
acquire2_thread_func	tests/threads/priority-donate-one.c	/^acquire2_thread_func (void *lock_) $/;"	f	file:
acquire2_thread_func	tests/threads/priority-donate-one.c	/^static thread_func acquire2_thread_func;$/;"	v	file:
acquire_console	lib/kernel/console.c	/^acquire_console (void) {$/;"	f	file:
acquire_thread_func	tests/threads/priority-donate-lower.c	/^acquire_thread_func (void *lock_) $/;"	f	file:
acquire_thread_func	tests/threads/priority-donate-lower.c	/^static thread_func acquire_thread_func;$/;"	v	file:
add_char	lib/user/console.c	/^add_char (char c, void *aux_) {$/;"	f	file:
address	include/threads/mmu.h	/^	uint64_t address;$/;"	m	struct:desc_ptr
alarm_priority_thread	tests/threads/alarm-priority.c	/^alarm_priority_thread (void *aux UNUSED) $/;"	f	file:
alarm_priority_thread	tests/threads/alarm-priority.c	/^static thread_func alarm_priority_thread;$/;"	v	file:
allocate_tid	threads/thread.c	/^allocate_tid (void) {$/;"	f	file:
anon	include/vm/vm.h	/^		struct anon_page anon;$/;"	m	union:page::__anon1	typeref:struct:page::__anon1::anon_page
anon_destroy	vm/anon.c	/^anon_destroy (struct page *page) {$/;"	f	file:
anon_initializer	vm/anon.c	/^anon_initializer (struct page *page, enum vm_type type, void *kva) {$/;"	f
anon_ops	vm/anon.c	/^static const struct page_operations anon_ops = {$/;"	v	typeref:struct:page_operations	file:
anon_page	include/vm/anon.h	/^struct anon_page {$/;"	s
anon_swap_in	vm/anon.c	/^anon_swap_in (struct page *page, void *kva) {$/;"	f	file:
anon_swap_out	vm/anon.c	/^anon_swap_out (struct page *page) {$/;"	f	file:
arc4	tests/arc4.h	/^struct arc4$/;"	s
arc4_crypt	tests/arc4.c	/^arc4_crypt (struct arc4 *arc4, void *buf_, size_t size)$/;"	f
arc4_crypt	tests/arc4.pm	/^sub arc4_crypt {$/;"	s
arc4_init	tests/arc4.c	/^arc4_init (struct arc4 *arc4, const void *key_, size_t size)$/;"	f
arc4_init	tests/arc4.pm	/^sub arc4_init {$/;"	s
archive_directory	tests/filesys/extended/tar.c	/^archive_directory (char file_name[], size_t file_name_size, int file_fd,$/;"	f	file:
archive_file	tests/filesys/extended/tar.c	/^archive_file (char file_name[], size_t file_name_size,$/;"	f	file:
archive_ordinary_file	tests/filesys/extended/tar.c	/^archive_ordinary_file (const char *file_name, int file_fd,$/;"	f	file:
area	threads/palloc.c	/^struct area {$/;"	s	file:
arena	threads/malloc.c	/^struct arena {$/;"	s	file:
arena_to_block	threads/malloc.c	/^arena_to_block (struct arena *a, size_t idx) {$/;"	f	file:
arg_cnt	threads/loader.S	/^arg_cnt:$/;"	l
args	threads/loader.S	/^args:$/;"	l
atoi	lib/stdlib.c	/^atoi (const char *s) $/;"	f
aux	include/lib/kernel/hash.h	/^	void *aux;                  \/* Auxiliary data for `hash' and `less'. *\/$/;"	m	struct:hash
aux	include/vm/uninit.h	/^	void *aux;$/;"	m	struct:uninit_page
avl	userprog/gdt.c	/^	unsigned avl : 1;$/;"	m	struct:segment_desc	file:
avl	userprog/gdt.c	/^	unsigned avl : 1;$/;"	m	struct:segment_descriptor64	file:
awake_threads	devices/timer.c	/^awake_threads (void) {$/;"	f
b	tests/threads/priority-donate-nest.c	/^    struct lock *b;$/;"	m	struct:locks	typeref:struct:locks::lock	file:
b_thread_func	tests/threads/priority-donate-multiple.c	/^b_thread_func (void *lock_) $/;"	f	file:
b_thread_func	tests/threads/priority-donate-multiple.c	/^static thread_func b_thread_func;$/;"	v	file:
b_thread_func	tests/threads/priority-donate-multiple2.c	/^b_thread_func (void *lock_) $/;"	f	file:
b_thread_func	tests/threads/priority-donate-multiple2.c	/^static thread_func b_thread_func;$/;"	v	file:
barrier	include/threads/synch.h	46;"	d
base	lib/stdio.c	/^	int base;                   \/* Base. *\/$/;"	m	struct:integer_base	file:
base	threads/palloc.c	/^	uint8_t *base;                  \/* Base of pool. *\/$/;"	m	struct:pool	file:
base_15_0	userprog/gdt.c	/^	unsigned base_15_0 : 16;$/;"	m	struct:segment_desc	file:
base_15_0	userprog/gdt.c	/^	unsigned base_15_0 : 16;$/;"	m	struct:segment_descriptor64	file:
base_23_16	userprog/gdt.c	/^	unsigned base_23_16 : 8;$/;"	m	struct:segment_desc	file:
base_23_16	userprog/gdt.c	/^	unsigned base_23_16 : 8;$/;"	m	struct:segment_descriptor64	file:
base_31_24	userprog/gdt.c	/^	unsigned base_31_24 : 8;$/;"	m	struct:segment_desc	file:
base_31_24	userprog/gdt.c	/^	unsigned base_31_24 : 8;$/;"	m	struct:segment_descriptor64	file:
base_63_32	userprog/gdt.c	/^	uint32_t base_63_32;$/;"	m	struct:segment_descriptor64	file:
base_X	lib/stdio.c	/^static const struct integer_base base_X = {16, "0123456789ABCDEF", 'X', 4};$/;"	v	typeref:struct:integer_base	file:
base_d	lib/stdio.c	/^static const struct integer_base base_d = {10, "0123456789", 0, 3};$/;"	v	typeref:struct:integer_base	file:
base_o	lib/stdio.c	/^static const struct integer_base base_o = {8, "01234567", 0, 3};$/;"	v	typeref:struct:integer_base	file:
base_pml4	threads/init.c	/^uint64_t *base_pml4;$/;"	v
base_x	lib/stdio.c	/^static const struct integer_base base_x = {16, "0123456789abcdef", 'x', 4};$/;"	v	typeref:struct:integer_base	file:
big_chunks	tests/vm/child-swap.c	/^static char big_chunks[CHUNK_SIZE];$/;"	v	file:
big_chunks	tests/vm/swap-anon.c	/^static char big_chunks[CHUNK_SIZE];$/;"	v	file:
big_chunks	tests/vm/swap-iter.c	/^static char big_chunks[CHUNK_SIZE];$/;"	v	file:
binary_search	lib/stdlib.c	/^binary_search (const void *key, const void *array, size_t cnt, size_t size,$/;"	f
bit_cnt	lib/kernel/bitmap.c	/^	size_t bit_cnt;     \/* Number of bits. *\/$/;"	m	struct:bitmap	file:
bit_mask	lib/kernel/bitmap.c	/^bit_mask (size_t bit_idx) {$/;"	f	file:
bitmap	lib/kernel/bitmap.c	/^struct bitmap {$/;"	s	file:
bitmap_all	lib/kernel/bitmap.c	/^bitmap_all (const struct bitmap *b, size_t start, size_t cnt) {$/;"	f
bitmap_any	lib/kernel/bitmap.c	/^bitmap_any (const struct bitmap *b, size_t start, size_t cnt) {$/;"	f
bitmap_buf_size	lib/kernel/bitmap.c	/^bitmap_buf_size (size_t bit_cnt) {$/;"	f
bitmap_contains	lib/kernel/bitmap.c	/^bitmap_contains (const struct bitmap *b, size_t start, size_t cnt, bool value) {$/;"	f
bitmap_count	lib/kernel/bitmap.c	/^bitmap_count (const struct bitmap *b, size_t start, size_t cnt, bool value) {$/;"	f
bitmap_create	lib/kernel/bitmap.c	/^bitmap_create (size_t bit_cnt) {$/;"	f
bitmap_create_in_buf	lib/kernel/bitmap.c	/^bitmap_create_in_buf (size_t bit_cnt, void *block, size_t block_size UNUSED) {$/;"	f
bitmap_destroy	lib/kernel/bitmap.c	/^bitmap_destroy (struct bitmap *b) {$/;"	f
bitmap_dump	lib/kernel/bitmap.c	/^bitmap_dump (const struct bitmap *b) {$/;"	f
bitmap_file_size	lib/kernel/bitmap.c	/^bitmap_file_size (const struct bitmap *b) {$/;"	f
bitmap_flip	lib/kernel/bitmap.c	/^bitmap_flip (struct bitmap *b, size_t bit_idx) {$/;"	f
bitmap_mark	lib/kernel/bitmap.c	/^bitmap_mark (struct bitmap *b, size_t bit_idx) {$/;"	f
bitmap_none	lib/kernel/bitmap.c	/^bitmap_none (const struct bitmap *b, size_t start, size_t cnt) {$/;"	f
bitmap_read	lib/kernel/bitmap.c	/^bitmap_read (struct bitmap *b, struct file *file) {$/;"	f
bitmap_reset	lib/kernel/bitmap.c	/^bitmap_reset (struct bitmap *b, size_t bit_idx) {$/;"	f
bitmap_scan	lib/kernel/bitmap.c	/^bitmap_scan (const struct bitmap *b, size_t start, size_t cnt, bool value) {$/;"	f
bitmap_scan_and_flip	lib/kernel/bitmap.c	/^bitmap_scan_and_flip (struct bitmap *b, size_t start, size_t cnt, bool value) {$/;"	f
bitmap_set	lib/kernel/bitmap.c	/^bitmap_set (struct bitmap *b, size_t idx, bool value) {$/;"	f
bitmap_set_all	lib/kernel/bitmap.c	/^bitmap_set_all (struct bitmap *b, bool value) {$/;"	f
bitmap_set_multiple	lib/kernel/bitmap.c	/^bitmap_set_multiple (struct bitmap *b, size_t start, size_t cnt, bool value) {$/;"	f
bitmap_size	lib/kernel/bitmap.c	/^bitmap_size (const struct bitmap *b) {$/;"	f
bitmap_test	lib/kernel/bitmap.c	/^bitmap_test (const struct bitmap *b, size_t idx) {$/;"	f
bitmap_write	lib/kernel/bitmap.c	/^bitmap_write (const struct bitmap *b, struct file *file) {$/;"	f
bits	lib/kernel/bitmap.c	/^	elem_type *bits;    \/* Elements that represent bits. *\/$/;"	m	struct:bitmap	file:
block	threads/malloc.c	/^struct block {$/;"	s	file:
block_size	threads/malloc.c	/^	size_t block_size;          \/* Size of each element in bytes. *\/$/;"	m	struct:desc	file:
block_size	threads/malloc.c	/^block_size (void *block) {$/;"	f	file:
block_thread	tests/threads/mlfqs/mlfqs-block.c	/^block_thread (void *lock_) $/;"	f	file:
block_to_arena	threads/malloc.c	/^block_to_arena (struct block *b) {$/;"	f	file:
blocks_per_arena	threads/malloc.c	/^	size_t blocks_per_arena;    \/* Number of blocks in an arena. *\/$/;"	m	struct:desc	file:
bool	include/lib/stdbool.h	4;"	d
boot_pde1	threads/start.S	/^boot_pde1:$/;"	l
boot_pde2	threads/start.S	/^boot_pde2:$/;"	l
boot_pdpt1	threads/start.S	/^boot_pdpt1:$/;"	l
boot_pdpt2	threads/start.S	/^boot_pdpt2:$/;"	l
boot_pml4e	threads/start.S	/^boot_pml4e:$/;"	l
bootstrap	threads/start.S	/^bootstrap:$/;"	l
bs	filesys/fat.c	/^	struct fat_boot bs;$/;"	m	struct:fat_fs	typeref:struct:fat_fs::fat_boot	file:
bsearch	lib/stdlib.c	/^bsearch (const void *key, const void *array, size_t cnt,$/;"	f
bss_init	threads/init.c	/^bss_init (void) {$/;"	f	file:
bucket	include/lib/kernel/hash.h	/^	struct list *bucket;        \/* Current bucket. *\/$/;"	m	struct:hash_iterator	typeref:struct:hash_iterator::list
bucket_cnt	include/lib/kernel/hash.h	/^	size_t bucket_cnt;          \/* Number of buckets, a power of 2. *\/$/;"	m	struct:hash
buckets	include/lib/kernel/hash.h	/^	struct list *buckets;       \/* Array of `bucket_cnt' lists. *\/$/;"	m	struct:hash	typeref:struct:hash::list
buf	include/devices/intq.h	/^	uint8_t buf[INTQ_BUFSIZE];  \/* Buffer. *\/$/;"	m	struct:intq
buf	lib/user/console.c	/^	char buf[64];       \/* Character buffer. *\/$/;"	m	struct:vhprintf_aux	file:
buf	tests/filesys/base/child-syn-read.c	/^static char buf[BUF_SIZE];$/;"	v	file:
buf	tests/filesys/base/child-syn-wrt.c	/^char buf[BUF_SIZE];$/;"	v
buf	tests/filesys/base/syn-read.c	/^static char buf[BUF_SIZE];$/;"	v	file:
buf	tests/filesys/extended/grow-file-size.c	/^static char buf[2134];$/;"	v	file:
buf	tests/filesys/extended/grow-sparse.c	/^static char buf[76543];$/;"	v	file:
buf	tests/filesys/extended/grow-tell.c	/^static char buf[2134];$/;"	v	file:
buf	tests/filesys/extended/syn-rw.c	/^char buf[BUF_SIZE];$/;"	v
buf	tests/vm/child-linear.c	/^static char buf[SIZE];$/;"	v	file:
buf	tests/vm/child-sort.c	/^unsigned char buf[128 * 1024];$/;"	v
buf	tests/vm/lazy-anon.c	/^static char buf[CHUNK_SIZE];$/;"	v	file:
buf	tests/vm/mmap-shuffle.c	/^static char *buf = (char *) 0x10000000;$/;"	v	file:
buf	tests/vm/page-linear.c	/^static char buf[SIZE];$/;"	v	file:
buf	tests/vm/page-shuffle.c	/^static char buf[SIZE];$/;"	v	file:
buf1	tests/filesys/base/syn-remove.c	/^char buf1[1234];$/;"	v
buf1	tests/filesys/base/syn-write.c	/^char buf1[BUF_SIZE];$/;"	v
buf1	tests/filesys/extended/child-syn-rw.c	/^static char buf1[BUF_SIZE];$/;"	v	file:
buf1	tests/vm/page-merge-seq.c	/^unsigned char buf1[DATA_SIZE], buf2[DATA_SIZE];$/;"	v
buf1	tests/vm/parallel-merge.c	/^unsigned char buf1[DATA_SIZE], buf2[DATA_SIZE];$/;"	v
buf2	tests/filesys/base/syn-remove.c	/^char buf2[1234];$/;"	v
buf2	tests/filesys/base/syn-write.c	/^char buf2[BUF_SIZE];$/;"	v
buf2	tests/filesys/extended/child-syn-rw.c	/^static char buf2[BUF_SIZE];$/;"	v	file:
buf2	tests/vm/page-merge-seq.c	/^unsigned char buf1[DATA_SIZE], buf2[DATA_SIZE];$/;"	v
buf2	tests/vm/parallel-merge.c	/^unsigned char buf1[DATA_SIZE], buf2[DATA_SIZE];$/;"	v
buf_a	tests/filesys/extended/grow-two-files.c	/^static char buf_a[FILE_SIZE];$/;"	v	file:
buf_a	tests/filesys/extended/symlink-dir.c	/^static char buf_a[FILE_SIZE];$/;"	v	file:
buf_a	tests/filesys/extended/symlink-file.c	/^static char buf_a[FILE_SIZE];$/;"	v	file:
buf_a	tests/filesys/extended/symlink-link.c	/^static char buf_a[FILE_SIZE];$/;"	v	file:
buf_b	tests/filesys/extended/grow-two-files.c	/^static char buf_b[FILE_SIZE];$/;"	v	file:
buf_b	tests/filesys/extended/symlink-file.c	/^static char buf_b[FILE_SIZE];$/;"	v	file:
buffer	devices/input.c	/^static struct intq buffer;$/;"	v	typeref:struct:intq	file:
busy_wait	devices/timer.c	/^busy_wait (int64_t loops) {$/;"	f	file:
byte_cnt	lib/kernel/bitmap.c	/^byte_cnt (size_t bit_cnt) {$/;"	f	file:
byte_to_sector	filesys/inode.c	/^byte_to_sector (const struct inode *inode, off_t pos) {$/;"	f	file:
bytes_to_sectors	filesys/inode.c	/^bytes_to_sectors (off_t size) {$/;"	f	file:
c_thread_func	tests/threads/priority-donate-multiple2.c	/^c_thread_func (void *a_ UNUSED) $/;"	f	file:
c_thread_func	tests/threads/priority-donate-multiple2.c	/^static thread_func c_thread_func;$/;"	v	file:
calloc	threads/malloc.c	/^calloc (size_t a, size_t b) {$/;"	f
capacity	devices/disk.c	/^	disk_sector_t capacity;     \/* Capacity in sectors (if is_ata). *\/$/;"	m	struct:disk	file:
caps_lock	devices/kbd.c	/^static bool caps_lock;$/;"	v	file:
changing_thread	tests/threads/priority-change.c	/^changing_thread (void *aux UNUSED) $/;"	f	file:
changing_thread	tests/threads/priority-change.c	/^static thread_func changing_thread;$/;"	v	file:
channel	devices/disk.c	/^	struct channel *channel;    \/* Channel disk is on. *\/$/;"	m	struct:disk	typeref:struct:disk::channel	file:
channel	devices/disk.c	/^struct channel {$/;"	s	file:
channels	devices/disk.c	/^static struct channel channels[CHANNEL_CNT];$/;"	v	typeref:struct:channel	file:
char_cnt	lib/user/console.c	/^	int char_cnt;       \/* Total characters written so far. *\/$/;"	m	struct:vhprintf_aux	file:
chars	devices/kbd.c	/^	const char *chars;          \/* chars[0] has scancode first_scancode,$/;"	m	struct:keymap	file:
chdir	lib/user/syscall.c	/^chdir (const char *dir) {$/;"	f
check_alarm	tests/threads/alarm.pm	/^sub check_alarm {$/;"	s
check_archive	tests/tests.pm	/^sub check_archive {$/;"	s
check_device_type	devices/disk.c	/^check_device_type (struct disk *d) {$/;"	f	file:
check_expected	tests/tests.pm	/^sub check_expected {$/;"	s
check_file	tests/lib.c	/^check_file (const char *file_name, const void *buf, size_t size) $/;"	f
check_file_handle	tests/lib.c	/^check_file_handle (int fd,$/;"	f
check_file_size	tests/filesys/extended/grow-file-size.c	/^check_file_size (int fd, long ofs) $/;"	f	file:
check_for_keyword	tests/tests.pm	/^sub check_for_keyword {$/;"	s
check_for_panic	tests/tests.pm	/^sub check_for_panic {$/;"	s
check_for_triple_fault	tests/tests.pm	/^sub check_for_triple_fault {$/;"	s
check_intr	userprog/syscall-entry.S	/^check_intr:$/;"	l
check_mlfqs_fair	tests/threads/mlfqs.pm	/^sub check_mlfqs_fair {$/;"	s
check_process_death	tests/vm/process_death.pm	/^sub check_process_death {$/;"	s
check_tell	tests/filesys/extended/grow-tell.c	/^check_tell (int fd, long ofs) $/;"	f	file:
checkf	tests/internal/stdio.c	/^checkf (const char *expect, const char *format, ...) $/;"	f	file:
cksum	tests/cksum.c	/^cksum (const void *b_, size_t n)$/;"	f
cksum	tests/cksum.pm	/^sub cksum {$/;"	s
cksum_file	tests/cksum.pm	/^sub cksum_file {$/;"	s
clear	userprog/gdt.c	/^	unsigned clear : 8;$/;"	m	struct:segment_descriptor64	file:
clear_row	devices/vga.c	/^clear_row (size_t y) {$/;"	f	file:
close	lib/user/syscall.c	/^close (int fd) {$/;"	f
cls	devices/vga.c	/^cls (void) {$/;"	f	file:
cluster_t	include/filesys/fat.h	/^typedef uint32_t cluster_t;  \/* Index of a cluster within FAT. *\/$/;"	t
cluster_to_sector	filesys/fat.c	/^cluster_to_sector (cluster_t clst) {$/;"	f
cmp_priority	threads/thread.c	/^bool cmp_priority (struct list_elem *elem1, struct list_elem *elem2, void *aux) {$/;"	f
cmp_wakeup_ticks	devices/timer.c	/^bool cmp_wakeup_ticks (struct list_elem *elem1, struct list_elem *elem2, void *aux) {$/;"	f
common_checks	tests/tests.pm	/^sub common_checks {$/;"	s
compact_diff	tests/Algorithm/Diff.pm	/^sub compact_diff$/;"	s
compare_bytes	tests/lib.c	/^compare_bytes (const void *read_data_, const void *expected_data_, size_t size,$/;"	f
compare_files	tests/tests.pm	/^sub compare_files {$/;"	s
compare_ints	tests/internal/stdlib.c	/^compare_ints (const void *a_, const void *b_) $/;"	f	file:
compare_output	tests/tests.pm	/^sub compare_output {$/;"	s
compare_thunk	lib/stdlib.c	/^compare_thunk (const void *a, const void *b, void *aux) $/;"	f	file:
completion_wait	devices/disk.c	/^	struct semaphore completion_wait;   \/* Up'd by interrupt handler. *\/$/;"	m	struct:channel	typeref:struct:channel::semaphore	file:
cond_broadcast	threads/synch.c	/^cond_broadcast (struct condition *cond, struct lock *lock) {$/;"	f
cond_init	threads/synch.c	/^cond_init (struct condition *cond) {$/;"	f
cond_signal	threads/synch.c	/^cond_signal (struct condition *cond, struct lock *lock UNUSED) {$/;"	f
cond_wait	threads/synch.c	/^cond_wait (struct condition *cond, struct lock *lock) {$/;"	f
condition	include/threads/synch.h	/^struct condition {$/;"	s
condition	tests/threads/priority-condvar.c	/^static struct condition condition;$/;"	v	typeref:struct:condition	file:
console_init	lib/kernel/console.c	/^console_init (void) {$/;"	f
console_lock	lib/kernel/console.c	/^static struct lock console_lock;$/;"	v	typeref:struct:lock	file:
console_lock_depth	lib/kernel/console.c	/^static int console_lock_depth;$/;"	v	file:
console_locked_by_current_thread	lib/kernel/console.c	/^console_locked_by_current_thread (void) {$/;"	f	file:
console_panic	lib/kernel/console.c	/^console_panic (void) {$/;"	f
console_print_stats	lib/kernel/console.c	/^console_print_stats (void) {$/;"	f
consume_some_resources	tests/userprog/no-vm/multi-oom.c	/^consume_some_resources (void)$/;"	f	file:
consume_some_resources_and_die	tests/userprog/no-vm/multi-oom.c	/^consume_some_resources_and_die (void)$/;"	f	file:
copy_string_across_boundary	tests/userprog/boundary.c	/^copy_string_across_boundary (const char *src) $/;"	f
crctab	tests/cksum.c	/^static unsigned long crctab[] = {$/;"	v	file:
create	lib/user/syscall.c	/^create (const char *file, unsigned initial_size) {$/;"	f
cs	include/threads/interrupt.h	/^	uint16_t cs;$/;"	m	struct:intr_frame
cx	devices/vga.c	/^static size_t cx, cy;$/;"	v	file:
cy	devices/vga.c	/^static size_t cx, cy;$/;"	v	file:
data	filesys/inode.c	/^	struct inode_disk data;             \/* Inode content. *\/$/;"	m	struct:inode	typeref:struct:inode::inode_disk	file:
data_start	filesys/fat.c	/^	disk_sector_t data_start;$/;"	m	struct:fat_fs	file:
db	userprog/gdt.c	/^	unsigned db : 1;$/;"	m	struct:segment_desc	file:
debug_backtrace	lib/debug.c	/^debug_backtrace (void) {$/;"	f
debug_panic	lib/kernel/debug.c	/^debug_panic (const char *file, int line, const char *function,$/;"	f
debug_panic	lib/user/debug.c	/^debug_panic (const char *file, int line, const char *function,$/;"	f
deny_write	filesys/file.c	/^	bool deny_write;            \/* Has file_deny_write() been called? *\/$/;"	m	struct:file	file:
deny_write_cnt	filesys/inode.c	/^	int deny_write_cnt;                 \/* 0: writes ok, >0: deny writes. *\/$/;"	m	struct:inode	file:
desc	threads/malloc.c	/^	struct desc *desc;          \/* Owning descriptor, null for big block. *\/$/;"	m	struct:arena	typeref:struct:arena::desc	file:
desc	threads/malloc.c	/^struct desc {$/;"	s	file:
desc_cnt	threads/malloc.c	/^static size_t desc_cnt;         \/* Number of descriptors. *\/$/;"	v	file:
desc_ptr	include/threads/mmu.h	/^struct desc_ptr {$/;"	s
descs	threads/malloc.c	/^static struct desc descs[10];   \/* Descriptors. *\/$/;"	v	typeref:struct:desc	file:
destroy	include/vm/vm.h	/^	void (*destroy) (struct page *);$/;"	m	struct:page_operations
destroy	include/vm/vm.h	81;"	d
destruction_req	threads/thread.c	/^static struct list destruction_req;$/;"	v	typeref:struct:list	file:
dev_no	devices/disk.c	/^	int dev_no;                 \/* Device 0 or 1 for master or slave. *\/$/;"	m	struct:disk	file:
devices	devices/disk.c	/^	struct disk devices[2];     \/* The devices on this channel. *\/$/;"	m	struct:channel	typeref:struct:channel::disk	file:
devices_SRC	devices/targets.mk	/^devices_SRC  = devices\/timer.c		# Timer device.$/;"	m
diff	tests/Algorithm/Diff.pm	/^sub diff$/;"	s
digits	lib/stdio.c	/^	const char *digits;         \/* Collection of digits. *\/$/;"	m	struct:integer_base	file:
dir	filesys/directory.c	/^struct dir {$/;"	s	file:
dir_add	filesys/directory.c	/^dir_add (struct dir *dir, const char *name, disk_sector_t inode_sector) {$/;"	f
dir_close	filesys/directory.c	/^dir_close (struct dir *dir) {$/;"	f
dir_create	filesys/directory.c	/^dir_create (disk_sector_t sector, size_t entry_cnt) {$/;"	f
dir_entry	filesys/directory.c	/^struct dir_entry {$/;"	s	file:
dir_get_inode	filesys/directory.c	/^dir_get_inode (struct dir *dir) {$/;"	f
dir_lookup	filesys/directory.c	/^dir_lookup (const struct dir *dir, const char *name,$/;"	f
dir_open	filesys/directory.c	/^dir_open (struct inode *inode) {$/;"	f
dir_open_root	filesys/directory.c	/^dir_open_root (void) {$/;"	f
dir_readdir	filesys/directory.c	/^dir_readdir (struct dir *dir, char name[NAME_MAX + 1]) {$/;"	f
dir_remove	filesys/directory.c	/^dir_remove (struct dir *dir, const char *name) {$/;"	f
dir_reopen	filesys/directory.c	/^dir_reopen (struct dir *dir) {$/;"	f
disk	devices/disk.c	/^struct disk {$/;"	s	file:
disk_get	devices/disk.c	/^disk_get (int chan_no, int dev_no) {$/;"	f
disk_init	devices/disk.c	/^disk_init (void) {$/;"	f
disk_print_stats	devices/disk.c	/^disk_print_stats (void) {$/;"	f
disk_read	devices/disk.c	/^disk_read (struct disk *d, disk_sector_t sec_no, void *buffer) {$/;"	f
disk_sector_t	include/devices/disk.h	/^typedef uint32_t disk_sector_t;$/;"	t
disk_size	devices/disk.c	/^disk_size (struct disk *d) {$/;"	f
disk_write	devices/disk.c	/^disk_write (struct disk *d, disk_sector_t sec_no, const void *buffer) {$/;"	f
divl	lib/arithmetic.c	/^divl (uint64_t n, uint32_t d) {$/;"	f	file:
do_compare	lib/stdlib.c	/^do_compare (unsigned char *array, size_t a_idx, size_t b_idx, size_t size,$/;"	f	file:
do_format	filesys/filesys.c	/^do_format (void) {$/;"	f	file:
do_iret	threads/thread.c	/^do_iret (struct intr_frame *tf) {$/;"	f
do_mkdir	tests/filesys/extended/mk-tree.c	/^do_mkdir (const char *format, ...) $/;"	f	file:
do_mmap	vm/file.c	/^do_mmap (void *addr, size_t length, int writable,$/;"	f
do_munmap	vm/file.c	/^do_munmap (void *addr) {$/;"	f
do_remove	tests/filesys/extended/dir-rm-tree.c	/^do_remove (const char *format, ...) $/;"	f	file:
do_schedule	threads/thread.c	/^do_schedule(int status) {$/;"	f	file:
do_swap	lib/stdlib.c	/^do_swap (unsigned char *array, size_t a_idx, size_t b_idx, size_t size)$/;"	f	file:
do_touch	tests/filesys/extended/mk-tree.c	/^do_touch (const char *format, ...)$/;"	f	file:
do_write	tests/filesys/extended/tar.c	/^do_write (int fd, const char *buffer, int size, bool *write_error) $/;"	f	file:
donor_thread_func	tests/threads/priority-donate-chain.c	/^donor_thread_func (void *locks_) $/;"	f	file:
donor_thread_func	tests/threads/priority-donate-chain.c	/^static thread_func donor_thread_func;$/;"	v	file:
donors_elem	include/threads/thread.h	/^	struct list_elem donors_elem;$/;"	m	struct:thread	typeref:struct:thread::list_elem
donors_list	include/threads/thread.h	/^	struct list *donors_list;$/;"	m	struct:thread	typeref:struct:thread::list
dpl	threads/interrupt.c	/^	unsigned dpl : 2;         \/\/ descriptor(meaning new) privilege level$/;"	m	struct:gate	file:
dpl	userprog/gdt.c	/^	unsigned dpl : 2;$/;"	m	struct:segment_desc	file:
dpl	userprog/gdt.c	/^	unsigned dpl : 2;$/;"	m	struct:segment_descriptor64	file:
ds	include/threads/interrupt.h	/^	uint16_t ds;$/;"	m	struct:intr_frame
dst	tests/userprog/boundary.c	/^static char dst[8192];$/;"	v	file:
dup2	lib/user/syscall.c	/^dup2 (int oldfd, int newfd){$/;"	f
duplicate_pte	userprog/process.c	/^duplicate_pte (uint64_t *pte, void *va, void *aux) {$/;"	f	file:
duration	tests/threads/alarm-wait.c	/^    int duration;               \/* Number of ticks to sleep. *\/$/;"	m	struct:sleep_thread	file:
e820_entry	threads/palloc.c	/^struct e820_entry {$/;"	s	file:
e820_parse_done	threads/loader.S	/^e820_parse_done:$/;"	l
e_ehsize	userprog/process.c	/^	uint16_t e_ehsize;$/;"	m	struct:ELF64_hdr	file:
e_entry	userprog/process.c	/^	uint64_t e_entry;$/;"	m	struct:ELF64_hdr	file:
e_flags	userprog/process.c	/^	uint32_t e_flags;$/;"	m	struct:ELF64_hdr	file:
e_ident	userprog/process.c	/^	unsigned char e_ident[EI_NIDENT];$/;"	m	struct:ELF64_hdr	file:
e_machine	userprog/process.c	/^	uint16_t e_machine;$/;"	m	struct:ELF64_hdr	file:
e_phentsize	userprog/process.c	/^	uint16_t e_phentsize;$/;"	m	struct:ELF64_hdr	file:
e_phnum	userprog/process.c	/^	uint16_t e_phnum;$/;"	m	struct:ELF64_hdr	file:
e_phoff	userprog/process.c	/^	uint64_t e_phoff;$/;"	m	struct:ELF64_hdr	file:
e_shentsize	userprog/process.c	/^	uint16_t e_shentsize;$/;"	m	struct:ELF64_hdr	file:
e_shnum	userprog/process.c	/^	uint16_t e_shnum;$/;"	m	struct:ELF64_hdr	file:
e_shoff	userprog/process.c	/^	uint64_t e_shoff;$/;"	m	struct:ELF64_hdr	file:
e_shstrndx	userprog/process.c	/^	uint16_t e_shstrndx;$/;"	m	struct:ELF64_hdr	file:
e_type	userprog/process.c	/^	uint16_t e_type;$/;"	m	struct:ELF64_hdr	file:
e_version	userprog/process.c	/^	uint32_t e_version;$/;"	m	struct:ELF64_hdr	file:
eflags	include/threads/interrupt.h	/^	uint64_t eflags;$/;"	m	struct:intr_frame
elem	filesys/inode.c	/^	struct list_elem elem;              \/* Element in inode list. *\/$/;"	m	struct:inode	typeref:struct:inode::list_elem	file:
elem	include/lib/kernel/hash.h	/^	struct hash_elem *elem;     \/* Current hash element in current bucket. *\/$/;"	m	struct:hash_iterator	typeref:struct:hash_iterator::hash_elem
elem	include/threads/thread.h	/^	struct list_elem elem;              \/* List element. *\/$/;"	m	struct:thread	typeref:struct:thread::list_elem
elem	tests/internal/list.c	/^    struct list_elem elem;      \/* List element. *\/$/;"	m	struct:value	typeref:struct:value::list_elem	file:
elem	threads/synch.c	/^	struct list_elem elem;              \/* List element. *\/$/;"	m	struct:semaphore_elem	typeref:struct:semaphore_elem::list_elem	file:
elem_cnt	include/lib/kernel/hash.h	/^	size_t elem_cnt;            \/* Number of elements in table. *\/$/;"	m	struct:hash
elem_cnt	lib/kernel/bitmap.c	/^elem_cnt (size_t bit_cnt) {$/;"	f	file:
elem_idx	lib/kernel/bitmap.c	/^elem_idx (size_t bit_idx) {$/;"	f	file:
elem_type	lib/kernel/bitmap.c	/^typedef unsigned long elem_type;$/;"	t	file:
end	threads/palloc.c	/^	uint64_t end;$/;"	m	struct:area	file:
entry_64	threads/start.S	/^entry_64:$/;"	l
error_code	include/threads/interrupt.h	/^	uint64_t error_code;$/;"	m	struct:intr_frame
es	include/threads/interrupt.h	/^	uint16_t es;$/;"	m	struct:intr_frame
exception_init	userprog/exception.c	/^exception_init (void) {$/;"	f
exception_print_stats	userprog/exception.c	/^exception_print_stats (void) {$/;"	f
exec	lib/user/syscall.c	/^exec (const char *file) {$/;"	f
exec_children	tests/lib.c	/^exec_children (const char *child_name, pid_t pids[], size_t child_cnt) $/;"	f
exit	lib/user/syscall.c	/^exit (int status) {$/;"	f
expecting_interrupt	devices/disk.c	/^	bool expecting_interrupt;   \/* True if an interrupt is expected, false if$/;"	m	struct:channel	file:
fail	tests/lib.c	/^fail (const char *format, ...) $/;"	f
fail	tests/tests.pm	/^sub fail {$/;"	s
fail	tests/threads/tests.c	/^fail (const char *format, ...) $/;"	f
failure_cnt	tests/internal/stdio.c	/^static int failure_cnt;$/;"	v	file:
false	include/lib/stdbool.h	6;"	d
fat	filesys/fat.c	/^	unsigned int *fat;$/;"	m	struct:fat_fs	file:
fat_boot	filesys/fat.c	/^struct fat_boot {$/;"	s	file:
fat_boot_create	filesys/fat.c	/^fat_boot_create (void) {$/;"	f
fat_close	filesys/fat.c	/^fat_close (void) {$/;"	f
fat_create	filesys/fat.c	/^fat_create (void) {$/;"	f
fat_create_chain	filesys/fat.c	/^fat_create_chain (cluster_t clst) {$/;"	f
fat_fs	filesys/fat.c	/^static struct fat_fs *fat_fs;$/;"	v	typeref:struct:fat_fs	file:
fat_fs	filesys/fat.c	/^struct fat_fs {$/;"	s	file:
fat_fs_init	filesys/fat.c	/^fat_fs_init (void) {$/;"	f
fat_get	filesys/fat.c	/^fat_get (cluster_t clst) {$/;"	f
fat_init	filesys/fat.c	/^fat_init (void) {$/;"	f
fat_length	filesys/fat.c	/^	unsigned int fat_length;$/;"	m	struct:fat_fs	file:
fat_open	filesys/fat.c	/^fat_open (void) {$/;"	f
fat_put	filesys/fat.c	/^fat_put (cluster_t clst, cluster_t val) {$/;"	f
fat_remove_chain	filesys/fat.c	/^fat_remove_chain (cluster_t clst, cluster_t pclst) {$/;"	f
fat_sectors	filesys/fat.c	/^	unsigned int fat_sectors; \/* Size of FAT in sectors. *\/$/;"	m	struct:fat_boot	file:
fat_start	filesys/fat.c	/^	unsigned int fat_start;$/;"	m	struct:fat_boot	file:
fb	devices/vga.c	/^static uint8_t (*fb)[COL_CNT][2];$/;"	v	file:
file	filesys/file.c	/^struct file {$/;"	s	file:
file	include/vm/vm.h	/^		struct file_page file;$/;"	m	union:page::__anon1	typeref:struct:page::__anon1::file_page
file_allow_write	filesys/file.c	/^file_allow_write (struct file *file) {$/;"	f
file_backed_destroy	vm/file.c	/^file_backed_destroy (struct page *page) {$/;"	f	file:
file_backed_initializer	vm/file.c	/^file_backed_initializer (struct page *page, enum vm_type type, void *kva) {$/;"	f
file_backed_swap_in	vm/file.c	/^file_backed_swap_in (struct page *page, void *kva) {$/;"	f	file:
file_backed_swap_out	vm/file.c	/^file_backed_swap_out (struct page *page) {$/;"	f	file:
file_close	filesys/file.c	/^file_close (struct file *file) {$/;"	f
file_deny_write	filesys/file.c	/^file_deny_write (struct file *file) {$/;"	f
file_duplicate	filesys/file.c	/^file_duplicate (struct file *file) {$/;"	f
file_get_inode	filesys/file.c	/^file_get_inode (struct file *file) {$/;"	f
file_length	filesys/file.c	/^file_length (struct file *file) {$/;"	f
file_name	tests/filesys/base/syn-read.h	/^static const char file_name[] = "data";$/;"	v
file_name	tests/filesys/base/syn-write.h	/^static const char file_name[] = "stuff";$/;"	v
file_name	tests/filesys/extended/syn-rw.h	/^static const char file_name[] = "logfile";$/;"	v
file_open	filesys/file.c	/^file_open (struct inode *inode) {$/;"	f
file_ops	vm/file.c	/^static const struct page_operations file_ops = {$/;"	v	typeref:struct:page_operations	file:
file_page	include/vm/file.h	/^struct file_page {$/;"	s
file_read	filesys/file.c	/^file_read (struct file *file, void *buffer, off_t size) {$/;"	f
file_read_at	filesys/file.c	/^file_read_at (struct file *file, void *buffer, off_t size, off_t file_ofs) {$/;"	f
file_reopen	filesys/file.c	/^file_reopen (struct file *file) {$/;"	f
file_seek	filesys/file.c	/^file_seek (struct file *file, off_t new_pos) {$/;"	f
file_size	tests/tests.pm	/^sub file_size {$/;"	s
file_tell	filesys/file.c	/^file_tell (struct file *file) {$/;"	f
file_write	filesys/file.c	/^file_write (struct file *file, const void *buffer, off_t size) {$/;"	f
file_write_at	filesys/file.c	/^file_write_at (struct file *file, const void *buffer, off_t size,$/;"	f
filesize	lib/user/syscall.c	/^filesize (int fd) {$/;"	f
filesys_SRC	filesys/targets.mk	/^filesys_SRC  = filesys\/filesys.c	# Filesystem core.$/;"	m
filesys_create	filesys/filesys.c	/^filesys_create (const char *name, off_t initial_size) {$/;"	f
filesys_disk	filesys/filesys.c	/^struct disk *filesys_disk;$/;"	v	typeref:struct:disk
filesys_done	filesys/filesys.c	/^filesys_done (void) {$/;"	f
filesys_init	filesys/filesys.c	/^filesys_init (bool format) {$/;"	f
filesys_open	filesys/filesys.c	/^filesys_open (const char *name) {$/;"	f
filesys_remove	filesys/filesys.c	/^filesys_remove (const char *name) {$/;"	f
fill_pdes	threads/start.S	/^fill_pdes:$/;"	l
find_bucket	lib/kernel/hash.c	/^find_bucket (struct hash *h, struct hash_elem *e) {$/;"	f	file:
find_cursor	devices/vga.c	/^find_cursor (size_t *x, size_t *y) {$/;"	f	file:
find_elem	lib/kernel/hash.c	/^find_elem (struct hash *h, struct list *bucket, struct hash_elem *e) {$/;"	f	file:
find_end_of_run	lib/kernel/list.c	/^find_end_of_run (struct list_elem *a, struct list_elem *b,$/;"	f	file:
finish	tests/tests.pm	/^sub finish {$/;"	s
first	tests/threads/priority-donate-chain.c	/^    struct lock *first;$/;"	m	struct:lock_pair	typeref:struct:lock_pair::lock	file:
first_scancode	devices/kbd.c	/^	uint8_t first_scancode;     \/* First scancode. *\/$/;"	m	struct:keymap	file:
flags	lib/stdio.c	/^	} flags;$/;"	m	struct:printf_conversion	typeref:enum:printf_conversion::__anon3	file:
flags	threads/palloc.c	/^	uint32_t flags;$/;"	m	struct:multiboot_info	file:
flatten_hierarchy	tests/tests.pm	/^sub flatten_hierarchy {$/;"	s
flush	lib/user/console.c	/^flush (struct vhprintf_aux *aux) {$/;"	f	file:
fork	lib/user/syscall.c	/^fork (const char *thread_name){$/;"	f
fork_and_wait	tests/userprog/fork-multiple.c	/^fork_and_wait (void){$/;"	f
fork_and_wait	tests/userprog/fork-recursive.c	/^fork_and_wait (void){$/;"	f
format_filesys	threads/init.c	/^static bool format_filesys;$/;"	v	file:
format_integer	lib/stdio.c	/^format_integer (uintmax_t value, bool is_signed, bool negative,$/;"	f	file:
format_string	lib/stdio.c	/^format_string (const char *string, int length,$/;"	f	file:
frame	include/vm/vm.h	/^	struct frame *frame;   \/* Back reference for frame *\/$/;"	m	struct:page	typeref:struct:page::frame
frame	include/vm/vm.h	/^struct frame {$/;"	s
free	threads/malloc.c	/^free (void *p) {$/;"	f
free_cnt	threads/malloc.c	/^	size_t free_cnt;            \/* Free blocks; pages in big block. *\/$/;"	m	struct:arena	file:
free_elem	threads/malloc.c	/^	struct list_elem free_elem; \/* Free list element. *\/$/;"	m	struct:block	typeref:struct:block::list_elem	file:
free_list	threads/malloc.c	/^	struct list free_list;      \/* List of free blocks. *\/$/;"	m	struct:desc	typeref:struct:desc::list	file:
free_map	filesys/free-map.c	/^static struct bitmap *free_map;      \/* Free map, one bit per disk sector. *\/$/;"	v	typeref:struct:bitmap	file:
free_map_allocate	filesys/free-map.c	/^free_map_allocate (size_t cnt, disk_sector_t *sectorp) {$/;"	f
free_map_close	filesys/free-map.c	/^free_map_close (void) {$/;"	f
free_map_create	filesys/free-map.c	/^free_map_create (void) {$/;"	f
free_map_file	filesys/free-map.c	/^static struct file *free_map_file;   \/* Free map file. *\/$/;"	v	typeref:struct:file	file:
free_map_init	filesys/free-map.c	/^free_map_init (void) {$/;"	f
free_map_open	filesys/free-map.c	/^free_map_open (void) {$/;"	f
free_map_release	filesys/free-map.c	/^free_map_release (disk_sector_t sector, size_t cnt) {$/;"	f
fsutil_cat	filesys/fsutil.c	/^fsutil_cat (char **argv) {$/;"	f
fsutil_get	filesys/fsutil.c	/^fsutil_get (char **argv) {$/;"	f
fsutil_ls	filesys/fsutil.c	/^fsutil_ls (char **argv UNUSED) {$/;"	f
fsutil_put	filesys/fsutil.c	/^fsutil_put (char **argv) {$/;"	f
fsutil_rm	filesys/fsutil.c	/^fsutil_rm (char **argv) {$/;"	f
function	tests/threads/tests.c	/^    test_func *function;$/;"	m	struct:test	file:
g	userprog/gdt.c	/^	unsigned g : 1;$/;"	m	struct:segment_desc	file:
g	userprog/gdt.c	/^	unsigned g : 1;$/;"	m	struct:segment_descriptor64	file:
gate	threads/interrupt.c	/^struct gate {$/;"	s	file:
gdt	threads/loader.S	/^gdt:$/;"	l
gdt	threads/thread.c	/^static uint64_t gdt[3] = { 0, 0x00af9a000000ffff, 0x00cf92000000ffff };$/;"	v	file:
gdt	userprog/gdt.c	/^static struct segment_desc gdt[SEL_CNT] = {$/;"	v	typeref:struct:segment_desc	file:
gdt64	threads/start.S	/^gdt64:$/;"	l
gdt_desc64	threads/start.S	/^gdt_desc64:$/;"	l
gdt_ds	userprog/gdt.c	/^struct desc_ptr gdt_ds = {$/;"	v	typeref:struct:desc_ptr
gdt_init	userprog/gdt.c	/^gdt_init (void) {$/;"	f
gdtdesc	threads/loader.S	/^gdtdesc:$/;"	l
getObjPkg	tests/Algorithm/Diff.pm	/^sub getObjPkg$/;"	s
get_boundary_area	tests/userprog/boundary.c	/^get_boundary_area (void) $/;"	f
get_core_output	tests/tests.pm	/^sub get_core_output {$/;"	s
get_effective_priority	threads/thread.c	/^int get_effective_priority (struct thread *t) {$/;"	f
get_phys_addr	include/lib/user/syscall.h	/^static inline void* get_phys_addr (void *user_addr) {$/;"	f
get_ready_list	threads/thread.c	/^struct list *get_ready_list (void) {$/;"	f
gp_registers	include/threads/interrupt.h	/^struct gp_registers {$/;"	s
group	lib/stdio.c	/^	int group;                  \/* Number of digits to group with ' flag. *\/$/;"	m	struct:integer_base	file:
h_thread_func	tests/threads/priority-donate-sema.c	/^h_thread_func (void *ls_) $/;"	f	file:
h_thread_func	tests/threads/priority-donate-sema.c	/^static thread_func h_thread_func;$/;"	v	file:
halt	lib/user/syscall.c	/^halt (void) {$/;"	f
handle	lib/user/console.c	/^	int handle;         \/* Output file handle. *\/$/;"	m	struct:vhprintf_aux	file:
hash	include/lib/kernel/hash.h	/^	hash_hash_func *hash;       \/* Hash function. *\/$/;"	m	struct:hash
hash	include/lib/kernel/hash.h	/^	struct hash *hash;          \/* The hash table. *\/$/;"	m	struct:hash_iterator	typeref:struct:hash_iterator::hash
hash	include/lib/kernel/hash.h	/^struct hash {$/;"	s
hash_action_func	include/lib/kernel/hash.h	/^typedef void hash_action_func (struct hash_elem *e, void *aux);$/;"	t
hash_apply	lib/kernel/hash.c	/^hash_apply (struct hash *h, hash_action_func *action) {$/;"	f
hash_bytes	lib/kernel/hash.c	/^hash_bytes (const void *buf_, size_t size) {$/;"	f
hash_clear	lib/kernel/hash.c	/^hash_clear (struct hash *h, hash_action_func *destructor) {$/;"	f
hash_cur	lib/kernel/hash.c	/^hash_cur (struct hash_iterator *i) {$/;"	f
hash_delete	lib/kernel/hash.c	/^hash_delete (struct hash *h, struct hash_elem *e) {$/;"	f
hash_destroy	lib/kernel/hash.c	/^hash_destroy (struct hash *h, hash_action_func *destructor) {$/;"	f
hash_elem	include/lib/kernel/hash.h	/^struct hash_elem {$/;"	s
hash_empty	lib/kernel/hash.c	/^hash_empty (struct hash *h) {$/;"	f
hash_entry	include/lib/kernel/hash.h	38;"	d
hash_find	lib/kernel/hash.c	/^hash_find (struct hash *h, struct hash_elem *e) {$/;"	f
hash_first	lib/kernel/hash.c	/^hash_first (struct hash_iterator *i, struct hash *h) {$/;"	f
hash_hash_func	include/lib/kernel/hash.h	/^typedef uint64_t hash_hash_func (const struct hash_elem *e, void *aux);$/;"	t
hash_init	lib/kernel/hash.c	/^hash_init (struct hash *h,$/;"	f
hash_insert	lib/kernel/hash.c	/^hash_insert (struct hash *h, struct hash_elem *new) {$/;"	f
hash_int	lib/kernel/hash.c	/^hash_int (int i) {$/;"	f
hash_iterator	include/lib/kernel/hash.h	/^struct hash_iterator {$/;"	s
hash_less_func	include/lib/kernel/hash.h	/^typedef bool hash_less_func (const struct hash_elem *a,$/;"	t
hash_next	lib/kernel/hash.c	/^hash_next (struct hash_iterator *i) {$/;"	f
hash_replace	lib/kernel/hash.c	/^hash_replace (struct hash *h, struct hash_elem *new) {$/;"	f
hash_size	lib/kernel/hash.c	/^hash_size (struct hash *h) {$/;"	f
hash_string	lib/kernel/hash.c	/^hash_string (const char *s_) {$/;"	f
head	include/devices/intq.h	/^	int head;                   \/* New data is written here. *\/$/;"	m	struct:intq
head	include/lib/kernel/list.h	/^	struct list_elem head;      \/* List head. *\/$/;"	m	struct:list	typeref:struct:list::list_elem
heapify	lib/stdlib.c	/^heapify (unsigned char *array, size_t i, size_t cnt, size_t size,$/;"	f	file:
hex_dump	lib/stdio.c	/^hex_dump (uintptr_t ofs, const void *buf_, size_t size, bool ascii) {$/;"	f
hex_dump	tests/tests.pm	/^sub hex_dump {$/;"	s
high_thread_func	tests/threads/priority-donate-nest.c	/^high_thread_func (void *lock_) $/;"	f	file:
high_thread_func	tests/threads/priority-donate-nest.c	/^static thread_func high_thread_func;$/;"	v	file:
histogram	tests/vm/child-sort.c	/^size_t histogram[256];$/;"	v
histogram	tests/vm/page-merge-seq.c	/^size_t histogram[256];$/;"	v
histogram	tests/vm/parallel-merge.c	/^size_t histogram[256];$/;"	v
holder	include/threads/synch.h	/^	struct thread *holder;      \/* Thread holding lock (for debugging). *\/$/;"	m	struct:lock	typeref:struct:lock::thread
hprintf	lib/user/console.c	/^hprintf (int handle, const char *format, ...) {$/;"	f
i	tests/arc4.h	/^    uint8_t i, j;$/;"	m	struct:arc4
id	tests/threads/alarm-wait.c	/^    int id;                     \/* Sleeper ID. *\/$/;"	m	struct:sleep_thread	file:
id	tests/threads/priority-fifo.c	/^    int id;                     \/* Sleeper ID. *\/$/;"	m	struct:simple_thread_data	file:
identify_ata_device	devices/disk.c	/^identify_ata_device (struct disk *d) {$/;"	f	file:
idle	threads/thread.c	/^idle (void *idle_started_ UNUSED) {$/;"	f	file:
idle_thread	threads/thread.c	/^static struct thread *idle_thread;$/;"	v	typeref:struct:thread	file:
idle_ticks	threads/thread.c	/^static long long idle_ticks;    \/* # of timer ticks spent idle. *\/$/;"	v	file:
idt	threads/interrupt.c	/^static struct gate idt[INTR_CNT];$/;"	v	typeref:struct:gate	file:
idt_desc	threads/interrupt.c	/^static struct desc_ptr idt_desc = {$/;"	v	typeref:struct:desc_ptr	file:
in_external_intr	threads/interrupt.c	/^static bool in_external_intr;   \/* Are we processing an external interrupt? *\/$/;"	v	file:
in_use	filesys/directory.c	/^	bool in_use;                        \/* In use or free? *\/$/;"	m	struct:dir_entry	file:
inb	include/threads/io.h	/^inb (uint16_t port) {$/;"	f
init	devices/vga.c	/^init (void) {$/;"	f	file:
init	include/vm/uninit.h	/^	vm_initializer *init;$/;"	m	struct:uninit_page
init	tests/vm/page-merge-seq.c	/^init (void)$/;"	f	file:
init	tests/vm/parallel-merge.c	/^init (void)$/;"	f	file:
init_poll	devices/serial.c	/^init_poll (void) {$/;"	f	file:
init_pool	threads/palloc.c	/^init_pool (struct pool *p, void **bm_base, uint64_t start, uint64_t end) {$/;"	f	file:
init_thread	threads/thread.c	/^init_thread (struct thread *t, const char *name, int priority) {$/;"	f	file:
initd	userprog/process.c	/^initd (void *f_name) {$/;"	f	file:
inited	lib/random.c	/^static bool inited;     $/;"	v	file:
initial_thread	threads/thread.c	/^static struct thread *initial_thread;$/;"	v	typeref:struct:thread	file:
inl	include/threads/io.h	/^inl (uint16_t port) {$/;"	f
inode	filesys/directory.c	/^	struct inode *inode;                \/* Backing store. *\/$/;"	m	struct:dir	typeref:struct:dir::inode	file:
inode	filesys/file.c	/^	struct inode *inode;        \/* File's inode. *\/$/;"	m	struct:file	typeref:struct:file::inode	file:
inode	filesys/inode.c	/^struct inode {$/;"	s	file:
inode_allow_write	filesys/inode.c	/^inode_allow_write (struct inode *inode) {$/;"	f
inode_close	filesys/inode.c	/^inode_close (struct inode *inode) {$/;"	f
inode_create	filesys/inode.c	/^inode_create (disk_sector_t sector, off_t length) {$/;"	f
inode_deny_write	filesys/inode.c	/^inode_deny_write (struct inode *inode) $/;"	f
inode_disk	filesys/inode.c	/^struct inode_disk {$/;"	s	file:
inode_get_inumber	filesys/inode.c	/^inode_get_inumber (const struct inode *inode) {$/;"	f
inode_init	filesys/inode.c	/^inode_init (void) {$/;"	f
inode_length	filesys/inode.c	/^inode_length (const struct inode *inode) {$/;"	f
inode_open	filesys/inode.c	/^inode_open (disk_sector_t sector) {$/;"	f
inode_read_at	filesys/inode.c	/^inode_read_at (struct inode *inode, void *buffer_, off_t size, off_t offset) {$/;"	f
inode_remove	filesys/inode.c	/^inode_remove (struct inode *inode) {$/;"	f
inode_reopen	filesys/inode.c	/^inode_reopen (struct inode *inode) {$/;"	f
inode_sector	filesys/directory.c	/^	disk_sector_t inode_sector;         \/* Sector number of header. *\/$/;"	m	struct:dir_entry	file:
inode_write_at	filesys/inode.c	/^inode_write_at (struct inode *inode, const void *buffer_, off_t size,$/;"	f
inplace_merge	lib/kernel/list.c	/^inplace_merge (struct list_elem *a0, struct list_elem *a1b0,$/;"	f	file:
input_full	devices/input.c	/^input_full (void) {$/;"	f
input_getc	devices/input.c	/^input_getc (void) {$/;"	f
input_init	devices/input.c	/^input_init (void) {$/;"	f
input_putc	devices/input.c	/^input_putc (uint8_t key) {$/;"	f
input_sector	devices/disk.c	/^input_sector (struct channel *c, void *sector) {$/;"	f	file:
insb	include/threads/io.h	/^insb (uint16_t port, void *addr, size_t cnt) {$/;"	f
insert_elem	lib/kernel/hash.c	/^insert_elem (struct hash *h, struct list *bucket, struct hash_elem *e) {$/;"	f	file:
insl	include/threads/io.h	/^insl (uint16_t port, void *addr, size_t cnt) {$/;"	f
inspect	vm/inspect.c	/^inspect (struct intr_frame *f) {$/;"	f	file:
install_page	userprog/process.c	/^install_page (void *upage, void *kpage, bool writable) {$/;"	f	file:
insw	include/threads/io.h	/^insw (uint16_t port, void *addr, size_t cnt) {$/;"	f
int16_t	include/lib/stdint.h	/^typedef signed short int int16_t;$/;"	t
int32_t	include/lib/stdint.h	/^typedef signed int int32_t;$/;"	t
int64_t	include/lib/stdint.h	/^typedef signed long long int int64_t;$/;"	t
int8_t	include/lib/stdint.h	/^typedef signed char int8_t;$/;"	t
integer_base	lib/stdio.c	/^struct integer_base {$/;"	s	file:
interloper_thread_func	tests/threads/priority-donate-chain.c	/^interloper_thread_func (void *arg_ UNUSED)$/;"	f	file:
interloper_thread_func	tests/threads/priority-donate-chain.c	/^static thread_func interloper_thread_func;$/;"	v	file:
interrupt_handler	devices/disk.c	/^interrupt_handler (struct intr_frame *f) {$/;"	f	file:
intmax_t	include/lib/stdint.h	/^typedef int64_t intmax_t;$/;"	t
intptr_t	include/lib/stdint.h	/^typedef int64_t intptr_t;$/;"	t
intq	include/devices/intq.h	/^struct intq {$/;"	s
intq_empty	devices/intq.c	/^intq_empty (const struct intq *q) {$/;"	f
intq_full	devices/intq.c	/^intq_full (const struct intq *q) {$/;"	f
intq_getc	devices/intq.c	/^intq_getc (struct intq *q) {$/;"	f
intq_init	devices/intq.c	/^intq_init (struct intq *q) {$/;"	f
intq_putc	devices/intq.c	/^intq_putc (struct intq *q, uint8_t byte) {$/;"	f
intr_context	threads/interrupt.c	/^intr_context (void) {$/;"	f
intr_disable	threads/interrupt.c	/^intr_disable (void) {$/;"	f
intr_dump_frame	threads/interrupt.c	/^intr_dump_frame (const struct intr_frame *f) {$/;"	f
intr_enable	threads/interrupt.c	/^intr_enable (void) {$/;"	f
intr_entry	threads/intr-stubs.S	/^intr_entry:$/;"	l
intr_frame	include/threads/interrupt.h	/^struct intr_frame {$/;"	s
intr_get_level	threads/interrupt.c	/^intr_get_level (void) {$/;"	f
intr_handler	threads/interrupt.c	/^intr_handler (struct intr_frame *frame) {$/;"	f
intr_handler_func	include/threads/interrupt.h	/^typedef void intr_handler_func (struct intr_frame *);$/;"	t
intr_handlers	threads/interrupt.c	/^static intr_handler_func *intr_handlers[INTR_CNT];$/;"	v	file:
intr_init	threads/interrupt.c	/^intr_init (void) {$/;"	f
intr_level	include/threads/interrupt.h	/^enum intr_level {$/;"	g
intr_name	threads/interrupt.c	/^intr_name (uint8_t vec) {$/;"	f
intr_names	threads/interrupt.c	/^static const char *intr_names[INTR_CNT];$/;"	v	file:
intr_register_ext	threads/interrupt.c	/^intr_register_ext (uint8_t vec_no, intr_handler_func *handler,$/;"	f
intr_register_int	threads/interrupt.c	/^intr_register_int (uint8_t vec_no, int dpl, enum intr_level level,$/;"	f
intr_set_level	threads/interrupt.c	/^intr_set_level (enum intr_level level) {$/;"	f
intr_stub_func	include/threads/intr-stubs.h	/^typedef void intr_stub_func (void);$/;"	t
intr_stubs	threads/intr-stubs.S	/^intr_stubs:$/;"	l
intr_yield_on_return	threads/interrupt.c	/^intr_yield_on_return (void) {$/;"	f
inumber	lib/user/syscall.c	/^inumber (int fd) {$/;"	f
invariant_keymap	devices/kbd.c	/^static const struct keymap invariant_keymap[] = {$/;"	v	typeref:struct:keymap	file:
invlpg	include/intrinsic.h	/^static __inline void invlpg(uint64_t addr) {$/;"	f
inw	include/threads/io.h	/^inw (uint16_t port) {$/;"	f
iomb	include/userprog/tss.h	/^	uint16_t iomb;$/;"	m	struct:task_state
irq	devices/disk.c	/^	uint8_t irq;                \/* Interrupt in use. *\/$/;"	m	struct:channel	file:
is_ata	devices/disk.c	/^	bool is_ata;                \/* 1=This device is an ATA disk. *\/$/;"	m	struct:disk	file:
is_dir	tests/tests.pm	/^sub is_dir {$/;"	s
is_head	lib/kernel/list.c	/^is_head (struct list_elem *elem) {$/;"	f	file:
is_interior	lib/kernel/list.c	/^is_interior (struct list_elem *elem) {$/;"	f	file:
is_kern_pte	include/threads/mmu.h	25;"	d
is_kernel_vaddr	include/threads/vaddr.h	44;"	d
is_partitioned	tests/vm/qsort.c	/^is_partitioned (const unsigned char *array, size_t size,$/;"	f	file:
is_power_of_2	lib/kernel/hash.c	/^is_power_of_2 (size_t x) {$/;"	f	file:
is_sorted	lib/kernel/list.c	/^is_sorted (struct list_elem *a, struct list_elem *b,$/;"	f	file:
is_sorted	tests/vm/qsort.c	/^is_sorted (const unsigned char *buf, size_t size) $/;"	f	file:
is_tail	lib/kernel/list.c	/^is_tail (struct list_elem *elem) {$/;"	f	file:
is_thread	threads/thread.c	69;"	d	file:
is_user_pte	include/threads/mmu.h	24;"	d
is_user_vaddr	include/threads/vaddr.h	41;"	d
is_writable	include/threads/mmu.h	23;"	d
isalnum	include/lib/ctype.h	/^static inline int isalnum (int c) { return isalpha (c) || isdigit (c); }$/;"	f
isalpha	include/lib/ctype.h	/^static inline int isalpha (int c) { return islower (c) || isupper (c); }$/;"	f
isascii	include/lib/ctype.h	/^static inline int isascii (int c) { return c >= 0 && c < 128; }$/;"	f
isblank	include/lib/ctype.h	/^static inline int isblank (int c) { return c == ' ' || c == '\\t'; }$/;"	f
iscntrl	include/lib/ctype.h	/^static inline int iscntrl (int c) { return (c >= 0 && c < 32) || c == 127; }$/;"	f
isdigit	include/lib/ctype.h	/^static inline int isdigit (int c) { return c >= '0' && c <= '9'; }$/;"	f
isdir	lib/user/syscall.c	/^isdir (int fd) {$/;"	f
isgraph	include/lib/ctype.h	/^static inline int isgraph (int c) { return c > 32 && c < 127; }$/;"	f
islower	include/lib/ctype.h	/^static inline int islower (int c) { return c >= 'a' && c <= 'z'; }$/;"	f
isprint	include/lib/ctype.h	/^static inline int isprint (int c) { return c >= 32 && c < 127; }$/;"	f
ispunct	include/lib/ctype.h	/^static inline int ispunct (int c) {$/;"	f
isspace	include/lib/ctype.h	/^static inline int isspace (int c) {$/;"	f
issue_pio_command	devices/disk.c	/^issue_pio_command (struct channel *c, uint8_t command) {$/;"	f	file:
ist	threads/interrupt.c	/^	unsigned ist : 3;        \/\/ # args, 0 for interrupt\/trap gates$/;"	m	struct:gate	file:
ist1	include/userprog/tss.h	/^	uint64_t ist1;$/;"	m	struct:task_state
ist2	include/userprog/tss.h	/^	uint64_t ist2;$/;"	m	struct:task_state
ist3	include/userprog/tss.h	/^	uint64_t ist3;$/;"	m	struct:task_state
ist4	include/userprog/tss.h	/^	uint64_t ist4;$/;"	m	struct:task_state
ist5	include/userprog/tss.h	/^	uint64_t ist5;$/;"	m	struct:task_state
ist6	include/userprog/tss.h	/^	uint64_t ist6;$/;"	m	struct:task_state
ist7	include/userprog/tss.h	/^	uint64_t ist7;$/;"	m	struct:task_state
isupper	include/lib/ctype.h	/^static inline int isupper (int c) { return c >= 'A' && c <= 'Z'; }$/;"	f
isxdigit	include/lib/ctype.h	/^static inline int isxdigit (int c) {$/;"	f
iterations	tests/threads/alarm-simultaneous.c	/^    int iterations;             \/* Number of iterations per thread. *\/$/;"	m	struct:sleep_test	file:
iterations	tests/threads/alarm-wait.c	/^    int iterations;             \/* Iterations counted so far. *\/$/;"	m	struct:sleep_thread	file:
iterations	tests/threads/alarm-wait.c	/^    int iterations;             \/* Number of iterations per thread. *\/$/;"	m	struct:sleep_test	file:
iterations	tests/threads/priority-fifo.c	/^    int iterations;             \/* Iterations so far. *\/$/;"	m	struct:simple_thread_data	file:
j	tests/arc4.h	/^    uint8_t i, j;$/;"	m	struct:arc4
kbd_init	devices/kbd.c	/^kbd_init (void) {$/;"	f
kbd_print_stats	devices/kbd.c	/^kbd_print_stats (void) {$/;"	f
kernel_SRC	lib/kernel/targets.mk	/^lib\/kernel_SRC  = lib\/kernel\/debug.c	# Debug helpers.$/;"	m
kernel_pool	threads/palloc.c	/^static struct pool kernel_pool, user_pool;$/;"	v	typeref:struct:pool	file:
kernel_thread	threads/thread.c	/^kernel_thread (thread_func *function, void *aux) {$/;"	f	file:
kernel_ticks	threads/thread.c	/^static long long kernel_ticks;  \/* # of timer ticks in kernel threads. *\/$/;"	v	file:
key_cnt	devices/kbd.c	/^static int64_t key_cnt;$/;"	v	file:
keyboard_interrupt	devices/kbd.c	/^keyboard_interrupt (struct intr_frame *args UNUSED) {$/;"	f	file:
keyboard_interrupt	devices/kbd.c	/^static intr_handler_func keyboard_interrupt;$/;"	v	file:
keymap	devices/kbd.c	/^struct keymap {$/;"	s	file:
kill	userprog/exception.c	/^kill (struct intr_frame *f) {$/;"	f	file:
kva	include/vm/vm.h	/^	void *kva;$/;"	m	struct:frame
l	userprog/gdt.c	/^	unsigned l : 1;$/;"	m	struct:segment_desc	file:
l_thread_func	tests/threads/priority-donate-sema.c	/^l_thread_func (void *ls_) $/;"	f	file:
l_thread_func	tests/threads/priority-donate-sema.c	/^static thread_func l_thread_func;$/;"	v	file:
last_clst	filesys/fat.c	/^	cluster_t last_clst;$/;"	m	struct:fat_fs	file:
last_mask	lib/kernel/bitmap.c	/^last_mask (const struct bitmap *b) {$/;"	f	file:
lazy_load_segment	userprog/process.c	/^lazy_load_segment (struct page *page, void *aux) {$/;"	f	file:
lcr3	include/intrinsic.h	/^static __inline void lcr3(uint64_t val) {$/;"	f
left_alt	devices/kbd.c	/^static bool left_alt, right_alt;        \/* Left and right Alt keys. *\/$/;"	v	file:
left_ctrl	devices/kbd.c	/^static bool left_ctrl, right_ctrl;      \/* Left and right Ctl keys. *\/$/;"	v	file:
left_shift	devices/kbd.c	/^static bool left_shift, right_shift;    \/* Left and right Shift keys. *\/$/;"	v	file:
len_hi	threads/palloc.c	/^	uint32_t len_hi;$/;"	m	struct:e820_entry	file:
len_lo	threads/palloc.c	/^	uint32_t len_lo;$/;"	m	struct:e820_entry	file:
length	filesys/inode.c	/^	off_t length;                       \/* File size in bytes. *\/$/;"	m	struct:inode_disk	file:
length	lib/stdio.c	/^	int length;         \/* Length of output string. *\/$/;"	m	struct:vsnprintf_aux	file:
less	include/lib/kernel/hash.h	/^	hash_less_func *less;       \/* Comparison function. *\/$/;"	m	struct:hash
lgdt	include/intrinsic.h	/^static __inline void lgdt(const struct desc_ptr *dtr) {$/;"	f
lib_SRC	lib/targets.mk	/^lib_SRC  = lib\/debug.c			# Debug helpers.$/;"	m
lidt	include/intrinsic.h	/^static __inline void lidt(const struct desc_ptr *dtr) {$/;"	f
lim_15_0	userprog/gdt.c	/^	unsigned lim_15_0 : 16;$/;"	m	struct:segment_desc	file:
lim_15_0	userprog/gdt.c	/^	unsigned lim_15_0 : 16;$/;"	m	struct:segment_descriptor64	file:
lim_19_16	userprog/gdt.c	/^	unsigned lim_19_16 : 4;$/;"	m	struct:segment_desc	file:
lim_19_16	userprog/gdt.c	/^	unsigned lim_19_16 : 4;$/;"	m	struct:segment_descriptor64	file:
list	include/lib/kernel/list.h	/^struct list {$/;"	s
list_back	lib/kernel/list.c	/^list_back (struct list *list) {$/;"	f
list_begin	lib/kernel/list.c	/^list_begin (struct list *list) {$/;"	f
list_elem	include/lib/kernel/hash.h	/^	struct list_elem list_elem;$/;"	m	struct:hash_elem	typeref:struct:hash_elem::list_elem
list_elem	include/lib/kernel/list.h	/^struct list_elem {$/;"	s
list_elem_to_hash_elem	lib/kernel/hash.c	12;"	d	file:
list_empty	lib/kernel/list.c	/^list_empty (struct list *list) {$/;"	f
list_end	lib/kernel/list.c	/^list_end (struct list *list) {$/;"	f
list_entry	include/lib/kernel/list.h	103;"	d
list_front	lib/kernel/list.c	/^list_front (struct list *list) {$/;"	f
list_head	lib/kernel/list.c	/^list_head (struct list *list) {$/;"	f
list_init	lib/kernel/list.c	/^list_init (struct list *list) {$/;"	f
list_insert	lib/kernel/list.c	/^list_insert (struct list_elem *before, struct list_elem *elem) {$/;"	f
list_insert_ordered	lib/kernel/list.c	/^list_insert_ordered (struct list *list, struct list_elem *elem,$/;"	f
list_less_func	include/lib/kernel/list.h	/^typedef bool list_less_func (const struct list_elem *a,$/;"	t
list_max	lib/kernel/list.c	/^list_max (struct list *list, list_less_func *less, void *aux) {$/;"	f
list_min	lib/kernel/list.c	/^list_min (struct list *list, list_less_func *less, void *aux) {$/;"	f
list_next	lib/kernel/list.c	/^list_next (struct list_elem *elem) {$/;"	f
list_pop_back	lib/kernel/list.c	/^list_pop_back (struct list *list) {$/;"	f
list_pop_front	lib/kernel/list.c	/^list_pop_front (struct list *list) {$/;"	f
list_prev	lib/kernel/list.c	/^list_prev (struct list_elem *elem) {$/;"	f
list_push_back	lib/kernel/list.c	/^list_push_back (struct list *list, struct list_elem *elem) {$/;"	f
list_push_front	lib/kernel/list.c	/^list_push_front (struct list *list, struct list_elem *elem) {$/;"	f
list_rbegin	lib/kernel/list.c	/^list_rbegin (struct list *list) {$/;"	f
list_remove	lib/kernel/list.c	/^list_remove (struct list_elem *elem) {$/;"	f
list_rend	lib/kernel/list.c	/^list_rend (struct list *list) {$/;"	f
list_reverse	lib/kernel/list.c	/^list_reverse (struct list *list) {$/;"	f
list_size	lib/kernel/list.c	/^list_size (struct list *list) {$/;"	f
list_sort	lib/kernel/list.c	/^list_sort (struct list *list, list_less_func *less, void *aux) {$/;"	f
list_splice	lib/kernel/list.c	/^list_splice (struct list_elem *before,$/;"	f
list_tail	lib/kernel/list.c	/^list_tail (struct list *list) {$/;"	f
list_unique	lib/kernel/list.c	/^list_unique (struct list *list, struct list *duplicates,$/;"	f
lldt	include/intrinsic.h	/^static __inline void lldt(uint16_t sel) {$/;"	f
load	userprog/process.c	/^load (const char *file_name, struct intr_frame *if_) {$/;"	f	file:
load_segment	userprog/process.c	/^load_segment (struct file *file, off_t ofs, uint8_t *upage,$/;"	f	file:
load_thread	tests/threads/mlfqs/mlfqs-fair.c	/^load_thread (void *ti_) $/;"	f	file:
load_thread	tests/threads/mlfqs/mlfqs-load-60.c	/^load_thread (void *aux UNUSED) $/;"	f	file:
load_thread	tests/threads/mlfqs/mlfqs-load-avg.c	/^load_thread (void *seq_no_) $/;"	f	file:
lock	devices/disk.c	/^	struct lock lock;           \/* Must acquire to access the controller. *\/$/;"	m	struct:channel	typeref:struct:channel::lock	file:
lock	include/devices/intq.h	/^	struct lock lock;           \/* Only one thread may wait at once. *\/$/;"	m	struct:intq	typeref:struct:intq::lock
lock	include/threads/synch.h	/^struct lock {$/;"	s
lock	tests/threads/priority-condvar.c	/^static struct lock lock;$/;"	v	typeref:struct:lock	file:
lock	tests/threads/priority-donate-sema.c	/^    struct lock lock;$/;"	m	struct:lock_and_sema	typeref:struct:lock_and_sema::lock	file:
lock	tests/threads/priority-fifo.c	/^    struct lock *lock;          \/* Lock on output. *\/$/;"	m	struct:simple_thread_data	typeref:struct:simple_thread_data::lock	file:
lock	threads/malloc.c	/^	struct lock lock;           \/* Lock. *\/$/;"	m	struct:desc	typeref:struct:desc::lock	file:
lock	threads/palloc.c	/^	struct lock lock;               \/* Mutual exclusion. *\/$/;"	m	struct:pool	typeref:struct:pool::lock	file:
lock_acquire	threads/synch.c	/^lock_acquire (struct lock *lock) {$/;"	f
lock_and_sema	tests/threads/priority-donate-sema.c	/^struct lock_and_sema $/;"	s	file:
lock_held_by_current_thread	threads/synch.c	/^lock_held_by_current_thread (const struct lock *lock) {$/;"	f
lock_init	threads/synch.c	/^lock_init (struct lock *lock) {$/;"	f
lock_pair	tests/threads/priority-donate-chain.c	/^struct lock_pair$/;"	s	file:
lock_release	threads/synch.c	/^lock_release (struct lock *lock) {$/;"	f
lock_try_acquire	threads/synch.c	/^lock_try_acquire (struct lock *lock) {$/;"	f
locks	tests/threads/priority-donate-nest.c	/^struct locks $/;"	s	file:
lookup	filesys/directory.c	/^lookup (const struct dir *dir, const char *name,$/;"	f	file:
loops_per_tick	devices/timer.c	/^static unsigned loops_per_tick;$/;"	v	file:
ltr	include/intrinsic.h	/^static __inline void ltr(uint16_t sel) {$/;"	f
m_thread_func	tests/threads/priority-donate-sema.c	/^m_thread_func (void *ls_) $/;"	f	file:
m_thread_func	tests/threads/priority-donate-sema.c	/^static thread_func m_thread_func;$/;"	v	file:
magic	filesys/fat.c	/^	unsigned int magic;$/;"	m	struct:fat_boot	file:
magic	filesys/inode.c	/^	unsigned magic;                     \/* Magic number. *\/$/;"	m	struct:inode_disk	file:
magic	include/threads/thread.h	/^	unsigned magic;                     \/* Detects stack overflow. *\/$/;"	m	struct:thread
magic	tests/userprog/dup2/dup2-complex.c	/^char magic[] = {$/;"	v
magic	tests/userprog/fork-multiple.c	/^int magic = 3;$/;"	v
magic	tests/userprog/fork-recursive.c	/^int magic = 1;$/;"	v
magic	threads/malloc.c	/^	unsigned magic;             \/* Always set to ARENA_MAGIC. *\/$/;"	m	struct:arena	file:
main	tests/cksum.c	/^main (void) $/;"	f
main	tests/filesys/base/child-syn-read.c	/^main (int argc, const char *argv[]) $/;"	f
main	tests/filesys/base/child-syn-wrt.c	/^main (int argc, char *argv[])$/;"	f
main	tests/filesys/extended/child-syn-rw.c	/^main (int argc, const char *argv[]) $/;"	f
main	tests/filesys/extended/tar.c	/^main (int argc, char *argv[]) $/;"	f
main	tests/main.c	/^main (int argc UNUSED, char *argv[]) $/;"	f
main	tests/userprog/args.c	/^main (int argc, char *argv[]) $/;"	f
main	tests/userprog/child-close.c	/^main (int argc UNUSED, char *argv[]) $/;"	f
main	tests/userprog/child-read.c	/^main (int argc UNUSED, char *argv[]) $/;"	f
main	tests/userprog/child-rox.c	/^main (int argc UNUSED, char *argv[]) $/;"	f
main	tests/userprog/child-simple.c	/^main (void) $/;"	f
main	tests/userprog/dup2/dup2-complex.c	/^main (int argc UNUSED, char *argv[] UNUSED) {$/;"	f
main	tests/userprog/dup2/dup2-simple.c	/^main (int argc UNUSED, char *argv[] UNUSED) {$/;"	f
main	tests/userprog/multi-recurse.c	/^main (int argc UNUSED, char *argv[]) $/;"	f
main	tests/userprog/no-vm/multi-oom.c	/^main (int argc UNUSED, char *argv[] UNUSED) {$/;"	f
main	tests/vm/child-linear.c	/^main (int argc, char *argv[])$/;"	f
main	tests/vm/child-qsort-mm.c	/^main (int argc UNUSED, char *argv[]) $/;"	f
main	tests/vm/child-qsort.c	/^main (int argc UNUSED, char *argv[]) $/;"	f
main	tests/vm/child-sort.c	/^main (int argc UNUSED, char *argv[]) $/;"	f
main	threads/init.c	/^main (void) {$/;"	f
make_children	tests/userprog/no-vm/multi-oom.c	/^make_children (void) {$/;"	f
make_gate	threads/interrupt.c	62;"	d	file:
make_intr_gate	threads/interrupt.c	83;"	d	file:
make_tar_archive	tests/filesys/extended/tar.c	/^make_tar_archive (const char *archive_name, char *files[], size_t file_cnt) $/;"	f	file:
make_trap_gate	threads/interrupt.c	86;"	d	file:
make_tree	tests/filesys/extended/mk-tree.c	/^make_tree (int at, int bt, int ct, int dt) $/;"	f
malloc	threads/malloc.c	/^malloc (size_t size) {$/;"	f
malloc_init	threads/malloc.c	/^malloc_init (void) {$/;"	f
map_key	devices/kbd.c	/^map_key (const struct keymap k[], unsigned scancode, uint8_t *c) {$/;"	f	file:
max_length	lib/stdio.c	/^	int max_length;     \/* Max length of output string. *\/$/;"	m	struct:vsnprintf_aux	file:
medium_thread_func	tests/threads/priority-donate-nest.c	/^medium_thread_func (void *locks_) $/;"	f	file:
medium_thread_func	tests/threads/priority-donate-nest.c	/^static thread_func medium_thread_func;$/;"	v	file:
mem_hi	threads/palloc.c	/^	uint32_t mem_hi;$/;"	m	struct:e820_entry	file:
mem_high	threads/palloc.c	/^	uint32_t mem_high;$/;"	m	struct:multiboot_info	file:
mem_lo	threads/palloc.c	/^	uint32_t mem_lo;$/;"	m	struct:e820_entry	file:
mem_low	threads/palloc.c	/^	uint32_t mem_low;$/;"	m	struct:multiboot_info	file:
memchr	lib/string.c	/^memchr (const void *block_, int ch_, size_t size) {$/;"	f
memcmp	lib/string.c	/^memcmp (const void *a_, const void *b_, size_t size) {$/;"	f
memcpy	lib/string.c	/^memcpy (void *dst_, const void *src_, size_t size) {$/;"	f
memmove	lib/string.c	/^memmove (void *dst_, const void *src_, size_t size) {$/;"	f
memset	lib/string.c	/^memset (void *dst_, int value, size_t size) {$/;"	f
merge	tests/vm/page-merge-seq.c	/^merge (void)$/;"	f	file:
merge	tests/vm/parallel-merge.c	/^merge (void)$/;"	f	file:
mkdir	lib/user/syscall.c	/^mkdir (const char *dir) {$/;"	f
mlfqs_compare	tests/threads/mlfqs.pm	/^sub mlfqs_compare {$/;"	s
mlfqs_expected_load	tests/threads/mlfqs.pm	/^sub mlfqs_expected_load {$/;"	s
mlfqs_expected_ticks	tests/threads/mlfqs.pm	/^sub mlfqs_expected_ticks {$/;"	s
mlfqs_row	tests/threads/mlfqs.pm	/^sub mlfqs_row {$/;"	s
mmap	lib/user/syscall.c	/^mmap (void *addr, size_t length, int writable, int fd, off_t offset) {$/;"	f
mmap_base	threads/palloc.c	/^	uint32_t mmap_base;$/;"	m	struct:multiboot_info	file:
mmap_len	threads/palloc.c	/^	uint32_t mmap_len;$/;"	m	struct:multiboot_info	file:
mode	devices/serial.c	/^static enum { UNINIT, POLL, QUEUE } mode;$/;"	v	typeref:enum:__anon5	file:
mount	lib/user/syscall.c	/^mount (const char *path, int chan_no, int dev_no) {$/;"	f
move_cursor	devices/vga.c	/^move_cursor (void) {$/;"	f	file:
msg	tests/lib.c	/^msg (const char *format, ...) $/;"	f
msg	tests/threads/tests.c	/^msg (const char *format, ...) $/;"	f
multiboot_info	threads/palloc.c	/^struct multiboot_info {$/;"	s	file:
munmap	lib/user/syscall.c	/^munmap (void *addr) {$/;"	f
name	devices/disk.c	/^	char name[8];               \/* Name, e.g. "hd0". *\/$/;"	m	struct:channel	file:
name	devices/disk.c	/^	char name[8];               \/* Name, e.g. "hd0:1". *\/$/;"	m	struct:disk	file:
name	filesys/directory.c	/^	char name[NAME_MAX + 1];            \/* Null terminated file name. *\/$/;"	m	struct:dir_entry	file:
name	include/threads/thread.h	/^	char name[16];                      \/* Name (for debugging purposes). *\/$/;"	m	struct:thread
name	tests/threads/tests.c	/^    const char *name;$/;"	m	struct:test	file:
new	tests/Algorithm/Diff.pm	/^sub new$/;"	s
newline	devices/vga.c	/^newline (void) {$/;"	f	file:
next	devices/intq.c	/^next (int pos) {$/;"	f	file:
next	include/lib/kernel/list.h	/^	struct list_elem *next;     \/* Next list element. *\/$/;"	m	struct:list_elem	typeref:struct:list_elem::list_elem
next_thread_to_run	threads/thread.c	/^next_thread_to_run (void) {$/;"	f	file:
nice	tests/threads/mlfqs/mlfqs-fair.c	/^    int nice;$/;"	m	struct:thread_info	file:
nlz	lib/arithmetic.c	/^nlz (uint32_t x) {$/;"	f	file:
no_long_mode	threads/start.S	/^no_long_mode:$/;"	l
no_sti	userprog/syscall-entry.S	/^no_sti:$/;"	l
normalize_fs	tests/tests.pm	/^sub normalize_fs {$/;"	s
not_empty	include/devices/intq.h	/^	struct thread *not_empty;   \/* Thread waiting for not-empty condition. *\/$/;"	m	struct:intq	typeref:struct:intq::thread
not_full	include/devices/intq.h	/^	struct thread *not_full;    \/* Thread waiting for not-full condition. *\/$/;"	m	struct:intq	typeref:struct:intq::thread
off_15_0	threads/interrupt.c	/^	unsigned off_15_0 : 16;   \/\/ low 16 bits of offset in segment$/;"	m	struct:gate	file:
off_31_16	threads/interrupt.c	/^	unsigned off_31_16 : 16;  \/\/ high bits of offset in segment$/;"	m	struct:gate	file:
off_32_63	threads/interrupt.c	/^	uint32_t off_32_63;$/;"	m	struct:gate	file:
off_t	include/filesys/off_t.h	/^typedef int32_t off_t;$/;"	t
off_t	include/lib/user/syscall.h	/^typedef int off_t;$/;"	t
offsetof	include/lib/stddef.h	5;"	d
op	tests/threads/priority-fifo.c	/^    int **op;                   \/* Output buffer position. *\/$/;"	m	struct:simple_thread_data	file:
open	lib/user/syscall.c	/^open (const char *file) {$/;"	f
open_cnt	filesys/inode.c	/^	int open_cnt;                       \/* Number of openers. *\/$/;"	m	struct:inode	file:
open_file	tests/tests.pm	/^sub open_file {$/;"	s
open_inodes	filesys/inode.c	/^static struct list open_inodes;$/;"	v	typeref:struct:list	file:
operations	include/vm/vm.h	/^	const struct page_operations *operations;$/;"	m	struct:page	typeref:struct:page::page_operations
outb	include/threads/io.h	/^outb (uint16_t port, uint8_t data) {$/;"	f
outl	include/threads/io.h	/^outl (uint16_t port, uint32_t data) {$/;"	f
output_dup	lib/stdio.c	/^output_dup (char ch, size_t cnt, void (*output) (char, void *), void *aux) {$/;"	f	file:
output_lock	tests/threads/alarm-wait.c	/^    struct lock output_lock;    \/* Lock protecting output buffer. *\/$/;"	m	struct:sleep_test	typeref:struct:sleep_test::lock	file:
output_pos	tests/threads/alarm-simultaneous.c	/^    int *output_pos;            \/* Current position in output buffer. *\/$/;"	m	struct:sleep_test	file:
output_pos	tests/threads/alarm-wait.c	/^    int *output_pos;            \/* Current position in output buffer. *\/$/;"	m	struct:sleep_test	file:
output_sector	devices/disk.c	/^output_sector (struct channel *c, const void *sector) {$/;"	f	file:
outsb	include/threads/io.h	/^outsb (uint16_t port, const void *addr, size_t cnt) {$/;"	f
outsl	include/threads/io.h	/^outsl (uint16_t port, const void *addr, size_t cnt) {$/;"	f
outsw	include/threads/io.h	/^outsw (uint16_t port, const void *addr, size_t cnt) {$/;"	f
outw	include/threads/io.h	/^outw (uint16_t port, uint16_t data) {$/;"	f
p	lib/stdio.c	/^	char *p;            \/* Current output position. *\/$/;"	m	struct:vsnprintf_aux	file:
p	lib/user/console.c	/^	char *p;            \/* Current position in buffer. *\/$/;"	m	struct:vhprintf_aux	file:
p	threads/interrupt.c	/^	unsigned p : 1;           \/\/ Present$/;"	m	struct:gate	file:
p	userprog/gdt.c	/^	unsigned p : 1;$/;"	m	struct:segment_desc	file:
p	userprog/gdt.c	/^	unsigned p : 1;$/;"	m	struct:segment_descriptor64	file:
p_align	userprog/process.c	/^	uint64_t p_align;$/;"	m	struct:ELF64_PHDR	file:
p_filesz	userprog/process.c	/^	uint64_t p_filesz;$/;"	m	struct:ELF64_PHDR	file:
p_flags	userprog/process.c	/^	uint32_t p_flags;$/;"	m	struct:ELF64_PHDR	file:
p_memsz	userprog/process.c	/^	uint64_t p_memsz;$/;"	m	struct:ELF64_PHDR	file:
p_offset	userprog/process.c	/^	uint64_t p_offset;$/;"	m	struct:ELF64_PHDR	file:
p_paddr	userprog/process.c	/^	uint64_t p_paddr;$/;"	m	struct:ELF64_PHDR	file:
p_type	userprog/process.c	/^	uint32_t p_type;$/;"	m	struct:ELF64_PHDR	file:
p_vaddr	userprog/process.c	/^	uint64_t p_vaddr;$/;"	m	struct:ELF64_PHDR	file:
page	include/vm/vm.h	/^	struct page *page;$/;"	m	struct:frame	typeref:struct:frame::page
page	include/vm/vm.h	/^struct page {$/;"	s
page_cache	include/filesys/page_cache.h	/^struct page_cache {};$/;"	s
page_cache	include/vm/vm.h	/^		struct page_cache page_cache;$/;"	m	union:page::__anon1	typeref:struct:page::__anon1::page_cache
page_cache_destroy	filesys/page_cache.c	/^page_cache_destroy (struct page *page) {$/;"	f	file:
page_cache_initializer	filesys/page_cache.c	/^page_cache_initializer (struct page *page, enum vm_type type, void *kva) {$/;"	f
page_cache_kworkerd	filesys/page_cache.c	/^page_cache_kworkerd (void *aux) {$/;"	f	file:
page_cache_op	filesys/page_cache.c	/^static const struct page_operations page_cache_op = {$/;"	v	typeref:struct:page_operations	file:
page_cache_readahead	filesys/page_cache.c	/^page_cache_readahead (struct page *page, void *kva) {$/;"	f	file:
page_cache_workerd	filesys/page_cache.c	/^tid_t page_cache_workerd;$/;"	v
page_cache_writeback	filesys/page_cache.c	/^page_cache_writeback (struct page *page) {$/;"	f	file:
page_fault	userprog/exception.c	/^page_fault (struct intr_frame *f) {$/;"	f	file:
page_fault_cnt	userprog/exception.c	/^static long long page_fault_cnt;$/;"	v	file:
page_from_pool	threads/palloc.c	/^page_from_pool (const struct pool *pool, void *page) {$/;"	f	file:
page_get_type	vm/vm.c	/^page_get_type (struct page *page) {$/;"	f
page_initializer	include/vm/uninit.h	/^	bool (*page_initializer) (struct page *, enum vm_type, void *kva);$/;"	m	struct:uninit_page
page_operations	include/vm/vm.h	/^struct page_operations {$/;"	s
pagecache_init	filesys/page_cache.c	/^pagecache_init (void) {$/;"	f
paging_init	threads/init.c	/^paging_init (uint64_t mem_end) {$/;"	f	file:
palloc_flags	include/threads/palloc.h	/^enum palloc_flags {$/;"	g
palloc_free_multiple	threads/palloc.c	/^palloc_free_multiple (void *pages, size_t page_cnt) {$/;"	f
palloc_free_page	threads/palloc.c	/^palloc_free_page (void *page) {$/;"	f
palloc_get_multiple	threads/palloc.c	/^palloc_get_multiple (enum palloc_flags flags, size_t page_cnt) {$/;"	f
palloc_get_page	threads/palloc.c	/^palloc_get_page (enum palloc_flags flags) {$/;"	f
palloc_init	threads/palloc.c	/^palloc_init (void) {$/;"	f
panic	threads/loader.S	/^panic:  .code16			# We only panic in real mode.$/;"	l
panic_message	threads/loader.S	/^panic_message:$/;"	l
parallel_merge	tests/vm/parallel-merge.c	/^parallel_merge (const char *child_name, int exit_status)$/;"	f
parse_conversion	lib/stdio.c	/^parse_conversion (const char *format, struct printf_conversion *c,$/;"	f	file:
parse_e820	threads/loader.S	/^parse_e820:$/;"	l
parse_options	threads/init.c	/^parse_options (char **argv) {$/;"	f	file:
partition	tests/vm/qsort.c	/^partition (unsigned char *array, size_t size, int pivot) $/;"	f	file:
pass	tests/tests.pm	/^sub pass {$/;"	s
pass	tests/threads/tests.c	/^pass (void) $/;"	f
pdp_for_each	threads/mmu.c	/^pdp_for_each (uint64_t *pdp,$/;"	f	file:
pdpe_destroy	threads/mmu.c	/^pdpe_destroy (uint64_t *pdpe) {$/;"	f	file:
pdpe_walk	threads/mmu.c	/^pdpe_walk (uint64_t *pdpe, const uint64_t va, int create) {$/;"	f	file:
pg_no	include/threads/vaddr.h	26;"	d
pg_ofs	include/threads/vaddr.h	24;"	d
pg_round_down	include/threads/vaddr.h	32;"	d
pg_round_up	include/threads/vaddr.h	29;"	d
pgdir_destroy	threads/mmu.c	/^pgdir_destroy (uint64_t *pdp) {$/;"	f	file:
pgdir_for_each	threads/mmu.c	/^pgdir_for_each (uint64_t *pdp, pte_for_each_func *func, void *aux,$/;"	f	file:
pgdir_walk	threads/mmu.c	/^pgdir_walk (uint64_t *pdp, const uint64_t va, int create) {$/;"	f	file:
pic_end_of_interrupt	threads/interrupt.c	/^pic_end_of_interrupt (int irq) {$/;"	f	file:
pic_init	threads/interrupt.c	/^pic_init (void) {$/;"	f	file:
pick_pivot	tests/vm/qsort.c	/^pick_pivot (unsigned char *buf, size_t size) $/;"	f	file:
pid_t	include/lib/user/syscall.h	/^typedef int pid_t;$/;"	t
pml4	include/threads/thread.h	/^	uint64_t *pml4;                     \/* Page map level 4 *\/$/;"	m	struct:thread
pml4_activate	threads/mmu.c	/^pml4_activate (uint64_t *pml4) {$/;"	f
pml4_clear_page	threads/mmu.c	/^pml4_clear_page (uint64_t *pml4, void *upage) {$/;"	f
pml4_create	threads/mmu.c	/^pml4_create (void) {$/;"	f
pml4_destroy	threads/mmu.c	/^pml4_destroy (uint64_t *pml4) {$/;"	f
pml4_for_each	threads/mmu.c	/^pml4_for_each (uint64_t *pml4, pte_for_each_func *func, void *aux) {$/;"	f
pml4_get_page	threads/mmu.c	/^pml4_get_page (uint64_t *pml4, const void *uaddr) {$/;"	f
pml4_is_accessed	threads/mmu.c	/^pml4_is_accessed (uint64_t *pml4, const void *vpage) {$/;"	f
pml4_is_dirty	threads/mmu.c	/^pml4_is_dirty (uint64_t *pml4, const void *vpage) {$/;"	f
pml4_set_accessed	threads/mmu.c	/^pml4_set_accessed (uint64_t *pml4, const void *vpage, bool accessed) {$/;"	f
pml4_set_dirty	threads/mmu.c	/^pml4_set_dirty (uint64_t *pml4, const void *vpage, bool dirty) {$/;"	f
pml4_set_page	threads/mmu.c	/^pml4_set_page (uint64_t *pml4, void *upage, void *kpage, bool rw) {$/;"	f
pml4e_walk	threads/mmu.c	/^pml4e_walk (uint64_t *pml4e, const uint64_t va, int create) {$/;"	f
pool	threads/palloc.c	/^struct pool {$/;"	s	file:
populate_pools	threads/palloc.c	/^populate_pools (struct area *base_mem, struct area *ext_mem) {$/;"	f	file:
pos	filesys/directory.c	/^	off_t pos;                          \/* Current position. *\/$/;"	m	struct:dir	file:
pos	filesys/file.c	/^	off_t pos;                  \/* Current position. *\/$/;"	m	struct:file	file:
power_off	threads/init.c	/^power_off (void) {$/;"	f
power_off_when_done	threads/init.c	/^bool power_off_when_done;$/;"	v
precision	lib/stdio.c	/^	int precision;$/;"	m	struct:printf_conversion	file:
prepare	tests/Algorithm/Diff.pm	/^sub prepare$/;"	s
prev	include/lib/kernel/list.h	/^	struct list_elem *prev;     \/* Previous list element. *\/$/;"	m	struct:list_elem	typeref:struct:list_elem::list_elem
print_ata_string	devices/disk.c	/^print_ata_string (char *string, size_t size) {$/;"	f	file:
print_fs	tests/tests.pm	/^sub print_fs {$/;"	s
print_stats	threads/init.c	/^print_stats (void) {$/;"	f	file:
printf	lib/stdio.c	/^printf (const char *format, ...) {$/;"	f
printf_conversion	lib/stdio.c	/^struct printf_conversion {$/;"	s	file:
priority	include/threads/thread.h	/^	int priority;                       \/* Priority. *\/$/;"	m	struct:thread
priority_condvar_thread	tests/threads/priority-condvar.c	/^priority_condvar_thread (void *aux UNUSED) $/;"	f	file:
priority_condvar_thread	tests/threads/priority-condvar.c	/^static thread_func priority_condvar_thread;$/;"	v	file:
priority_sema_thread	tests/threads/priority-sema.c	/^priority_sema_thread (void *aux UNUSED) $/;"	f	file:
priority_sema_thread	tests/threads/priority-sema.c	/^static thread_func priority_sema_thread;$/;"	v	file:
process_activate	userprog/process.c	/^process_activate (struct thread *next) {$/;"	f
process_cleanup	userprog/process.c	/^process_cleanup (void) {$/;"	f	file:
process_create_initd	userprog/process.c	/^process_create_initd (const char *file_name) {$/;"	f
process_exec	userprog/process.c	/^process_exec (void *f_name) {$/;"	f
process_exit	userprog/process.c	/^process_exit (void) {$/;"	f
process_fork	userprog/process.c	/^process_fork (const char *name, struct intr_frame *if_ UNUSED) {$/;"	f
process_init	userprog/process.c	/^process_init (void) {$/;"	f	file:
process_wait	userprog/process.c	/^process_wait (tid_t child_tid UNUSED) {$/;"	f
protcseg	threads/loader.S	/^protcseg:$/;"	l
pt_destroy	threads/mmu.c	/^pt_destroy (uint64_t *pt) {$/;"	f	file:
pt_for_each	threads/mmu.c	/^pt_for_each (uint64_t *pt, pte_for_each_func *func, void *aux,$/;"	f	file:
pte_for_each_func	include/threads/mmu.h	/^typedef bool pte_for_each_func (uint64_t *pte, void *va, void *aux);$/;"	t
pte_get_paddr	include/threads/mmu.h	27;"	d
ptov	include/threads/vaddr.h	49;"	d
ptrdiff_t	include/lib/stddef.h	/^typedef __PTRDIFF_TYPE__ ptrdiff_t;$/;"	t
putbuf	lib/kernel/console.c	/^putbuf (const char *buffer, size_t n) {$/;"	f
putc_poll	devices/serial.c	/^putc_poll (uint8_t byte) {$/;"	f	file:
putchar	lib/kernel/console.c	/^putchar (int c) {$/;"	f
putchar	lib/user/console.c	/^putchar (int c) {$/;"	f
putchar_have_lock	lib/kernel/console.c	/^putchar_have_lock (uint8_t c) {$/;"	f	file:
puts	lib/kernel/console.c	/^puts (const char *s) {$/;"	f
puts	lib/user/console.c	/^puts (const char *s) {$/;"	f
qsort	lib/stdlib.c	/^qsort (void *array, size_t cnt, size_t size,$/;"	f
qsort_bytes	tests/vm/qsort.c	/^qsort_bytes (unsigned char *buf, size_t size) $/;"	f
quiet	tests/lib.c	/^bool quiet = false;$/;"	v
r10	include/threads/interrupt.h	/^	uint64_t r10;$/;"	m	struct:gp_registers
r11	include/threads/interrupt.h	/^	uint64_t r11;$/;"	m	struct:gp_registers
r12	include/threads/interrupt.h	/^	uint64_t r12;$/;"	m	struct:gp_registers
r13	include/threads/interrupt.h	/^	uint64_t r13;$/;"	m	struct:gp_registers
r14	include/threads/interrupt.h	/^	uint64_t r14;$/;"	m	struct:gp_registers
r15	include/threads/interrupt.h	/^	uint64_t r15;$/;"	m	struct:gp_registers
r8	include/threads/interrupt.h	/^	uint64_t r8;$/;"	m	struct:gp_registers
r9	include/threads/interrupt.h	/^	uint64_t r9;$/;"	m	struct:gp_registers
random_bytes	lib/random.c	/^random_bytes (void *buf_, size_t size) {$/;"	f
random_bytes	tests/random.pm	/^sub random_bytes {$/;"	s
random_init	lib/random.c	/^random_init (unsigned seed) {$/;"	f
random_init	tests/random.pm	/^sub random_init {$/;"	s
random_ulong	lib/random.c	/^random_ulong (void) {$/;"	f
random_ulong	tests/random.pm	/^sub random_ulong {$/;"	s
rax	include/threads/interrupt.h	/^	uint64_t rax;$/;"	m	struct:gp_registers
rbp	include/threads/interrupt.h	/^	uint64_t rbp;$/;"	m	struct:gp_registers
rbx	include/threads/interrupt.h	/^	uint64_t rbx;$/;"	m	struct:gp_registers
rcr2	include/intrinsic.h	/^static __inline uint64_t rcr2(void) {$/;"	f
rcr3	include/intrinsic.h	/^static __inline uint64_t rcr3(void) {$/;"	f
rcx	include/threads/interrupt.h	/^	uint64_t rcx;$/;"	m	struct:gp_registers
rdi	include/threads/interrupt.h	/^	uint64_t rdi;$/;"	m	struct:gp_registers
rdx	include/threads/interrupt.h	/^	uint64_t rdx;$/;"	m	struct:gp_registers
read	lib/user/syscall.c	/^read (int fd, void *buffer, unsigned size) {$/;"	f
read_cnt	devices/disk.c	/^	long long read_cnt;         \/* Number of sectors read. *\/$/;"	m	struct:disk	file:
read_command_line	threads/init.c	/^read_command_line (void) {$/;"	f	file:
read_eflags	include/intrinsic.h	/^static __inline uint64_t read_eflags(void) {$/;"	f
read_sector	threads/loader.S	/^read_sector:$/;"	l
read_tar	tests/tests.pm	/^sub read_tar {$/;"	s
read_text_file	tests/tests.pm	/^sub read_text_file {$/;"	s
readdir	lib/user/syscall.c	/^readdir (int fd, char name[READDIR_MAX_LEN + 1]) {$/;"	f
ready_list	threads/thread.c	/^static struct list ready_list;$/;"	v	typeref:struct:list	file:
real_time_sleep	devices/timer.c	/^real_time_sleep (int64_t num, int32_t denom) {$/;"	f	file:
realloc	threads/malloc.c	/^realloc (void *old_block, size_t new_size) {$/;"	f
reg_alt_status	devices/disk.c	29;"	d	file:
reg_base	devices/disk.c	/^	uint16_t reg_base;          \/* Base I\/O port. *\/$/;"	m	struct:channel	file:
reg_command	devices/disk.c	23;"	d	file:
reg_ctl	devices/disk.c	28;"	d	file:
reg_data	devices/disk.c	15;"	d	file:
reg_device	devices/disk.c	21;"	d	file:
reg_error	devices/disk.c	16;"	d	file:
reg_lbah	devices/disk.c	20;"	d	file:
reg_lbal	devices/disk.c	18;"	d	file:
reg_lbam	devices/disk.c	19;"	d	file:
reg_nsect	devices/disk.c	17;"	d	file:
reg_status	devices/disk.c	22;"	d	file:
register_handler	threads/interrupt.c	/^register_handler (uint8_t vec_no, int dpl, enum intr_level level,$/;"	f	file:
register_inspect_intr	vm/inspect.c	/^register_inspect_intr (void) {$/;"	f
rehash	lib/kernel/hash.c	/^rehash (struct hash *h) {$/;"	f	file:
release_console	lib/kernel/console.c	/^release_console (void) {$/;"	f	file:
remove	lib/user/syscall.c	/^remove (const char *file) {$/;"	f
remove_elem	lib/kernel/hash.c	/^remove_elem (struct hash *h, struct hash_elem *e) {$/;"	f	file:
remove_tree	tests/filesys/extended/dir-rm-tree.c	/^remove_tree (int at, int bt, int ct, int dt) $/;"	f	file:
removed	filesys/inode.c	/^	bool removed;                       \/* True if deleted, false otherwise. *\/$/;"	m	struct:inode	file:
res1	include/userprog/tss.h	/^	uint32_t res1;$/;"	m	struct:task_state
res1	userprog/gdt.c	/^	unsigned res1 : 8;$/;"	m	struct:segment_descriptor64	file:
res2	include/userprog/tss.h	/^	uint64_t res2;$/;"	m	struct:task_state
res2	userprog/gdt.c	/^	unsigned res2 : 16;$/;"	m	struct:segment_descriptor64	file:
res3	include/userprog/tss.h	/^	uint64_t res3;$/;"	m	struct:task_state
res4	include/userprog/tss.h	/^	uint16_t res4;$/;"	m	struct:task_state
reset_channel	devices/disk.c	/^reset_channel (struct channel *c) {$/;"	f	file:
resolve_area_info	threads/palloc.c	/^resolve_area_info (struct area *base_mem, struct area *ext_mem) {$/;"	f	file:
return_block_size	tests/filesys/extended/grow-file-size.c	/^return_block_size (void) $/;"	f	file:
return_block_size	tests/filesys/extended/grow-tell.c	/^return_block_size (void) $/;"	f	file:
right_alt	devices/kbd.c	/^static bool left_alt, right_alt;        \/* Left and right Alt keys. *\/$/;"	v	file:
right_ctrl	devices/kbd.c	/^static bool left_ctrl, right_ctrl;      \/* Left and right Ctl keys. *\/$/;"	v	file:
right_shift	devices/kbd.c	/^static bool left_shift, right_shift;    \/* Left and right Shift keys. *\/$/;"	v	file:
rip	include/threads/interrupt.h	/^	uintptr_t rip;$/;"	m	struct:intr_frame
root_dir_cluster	filesys/fat.c	/^	unsigned int root_dir_cluster;$/;"	m	struct:fat_boot	file:
rr10	include/intrinsic.h	/^static __inline uint64_t rr10(void) {$/;"	f
rr8	include/intrinsic.h	/^static __inline uint64_t rr8(void) {$/;"	f
rr9	include/intrinsic.h	/^static __inline uint64_t rr9(void) {$/;"	f
rrax	include/intrinsic.h	/^static __inline uint64_t rrax(void) {$/;"	f
rrcx	include/intrinsic.h	/^static __inline uint64_t rrcx(void) {$/;"	f
rrdi	include/intrinsic.h	/^static __inline uint64_t rrdi(void) {$/;"	f
rrdx	include/intrinsic.h	/^static __inline uint64_t rrdx(void) {$/;"	f
rrsi	include/intrinsic.h	/^static __inline uint64_t rrsi(void) {$/;"	f
rrsp	include/intrinsic.h	/^static __inline uint64_t rrsp(void) {$/;"	f
rsi	include/threads/interrupt.h	/^	uint64_t rsi;$/;"	m	struct:gp_registers
rsp	include/threads/interrupt.h	/^	uintptr_t rsp;$/;"	m	struct:intr_frame
rsp0	include/userprog/tss.h	/^	uint64_t rsp0;$/;"	m	struct:task_state
rsp1	include/userprog/tss.h	/^	uint64_t rsp1;$/;"	m	struct:task_state
rsp2	include/userprog/tss.h	/^	uint64_t rsp2;$/;"	m	struct:task_state
rsv1	threads/interrupt.c	/^	unsigned rsv1 : 5;        \/\/ reserved(should be zero I guess)$/;"	m	struct:gate	file:
rsv1	userprog/gdt.c	/^	unsigned rsv1 : 2;$/;"	m	struct:segment_descriptor64	file:
rsv2	threads/interrupt.c	/^	uint32_t rsv2;$/;"	m	struct:gate	file:
run_actions	threads/init.c	/^run_actions (char **argv) {$/;"	f	file:
run_task	threads/init.c	/^run_task (char **argv) {$/;"	f	file:
run_test	tests/threads/tests.c	/^run_test (const char *name) $/;"	f
running_thread	threads/thread.c	76;"	d	file:
s	lib/random.c	/^static uint8_t s[256];          \/* S[]. *\/$/;"	v	file:
s	tests/arc4.h	/^    uint8_t s[256];$/;"	m	struct:arc4
s	threads/interrupt.c	/^	unsigned s : 1;           \/\/ must be 0 (system)$/;"	m	struct:gate	file:
s	userprog/gdt.c	/^	unsigned s : 1;$/;"	m	struct:segment_desc	file:
s	userprog/gdt.c	/^	unsigned s : 1;$/;"	m	struct:segment_descriptor64	file:
s_i	lib/random.c	/^static uint8_t s_i, s_j;        \/* i, j. *\/$/;"	v	file:
s_j	lib/random.c	/^static uint8_t s_i, s_j;        \/* i, j. *\/$/;"	v	file:
schedule	threads/thread.c	/^schedule (void) {$/;"	f	file:
sdiff	tests/Algorithm/Diff.pm	/^sub sdiff$/;"	s
sdiv64	lib/arithmetic.c	/^sdiv64 (int64_t n, int64_t d) {$/;"	f	file:
second	tests/threads/priority-donate-chain.c	/^    struct lock *second;$/;"	m	struct:lock_pair	typeref:struct:lock_pair::lock	file:
sector	filesys/inode.c	/^	disk_sector_t sector;               \/* Sector number of disk location. *\/$/;"	m	struct:inode	file:
sectors_per_cluster	filesys/fat.c	/^	unsigned int sectors_per_cluster; \/* Fixed to 1 *\/$/;"	m	struct:fat_boot	file:
seek	lib/user/syscall.c	/^seek (int fd, unsigned position) {$/;"	f
segment_desc	userprog/gdt.c	/^struct segment_desc {$/;"	s	file:
segment_descriptor64	userprog/gdt.c	/^struct segment_descriptor64 {$/;"	s	file:
select_device	devices/disk.c	/^select_device (const struct disk *d) {$/;"	f	file:
select_device_wait	devices/disk.c	/^select_device_wait (const struct disk *d) {$/;"	f	file:
select_sector	devices/disk.c	/^select_sector (struct disk *d, disk_sector_t sec_no) {$/;"	f	file:
sema	tests/threads/priority-donate-sema.c	/^    struct semaphore sema;$/;"	m	struct:lock_and_sema	typeref:struct:lock_and_sema::semaphore	file:
sema	tests/threads/priority-sema.c	/^static struct semaphore sema;$/;"	v	typeref:struct:semaphore	file:
sema_down	threads/synch.c	/^sema_down (struct semaphore *sema) {$/;"	f
sema_init	threads/synch.c	/^sema_init (struct semaphore *sema, unsigned value) {$/;"	f
sema_self_test	threads/synch.c	/^sema_self_test (void) {$/;"	f
sema_test_helper	threads/synch.c	/^sema_test_helper (void *sema_) {$/;"	f	file:
sema_try_down	threads/synch.c	/^sema_try_down (struct semaphore *sema) {$/;"	f
sema_up	threads/synch.c	/^sema_up (struct semaphore *sema) {$/;"	f
semaphore	include/threads/synch.h	/^	struct semaphore semaphore; \/* Binary semaphore controlling access. *\/$/;"	m	struct:lock	typeref:struct:lock::semaphore
semaphore	include/threads/synch.h	/^struct semaphore {$/;"	s
semaphore	threads/synch.c	/^	struct semaphore semaphore;         \/* This semaphore. *\/$/;"	m	struct:semaphore_elem	typeref:struct:semaphore_elem::semaphore	file:
semaphore_elem	threads/synch.c	/^struct semaphore_elem {$/;"	s	file:
seq_test	tests/filesys/seq-test.c	/^seq_test (const char *file_name, void *buf, size_t size, size_t initial_size,$/;"	f
serial_flush	devices/serial.c	/^serial_flush (void) {$/;"	f
serial_init_queue	devices/serial.c	/^serial_init_queue (void) {$/;"	f
serial_interrupt	devices/serial.c	/^serial_interrupt (struct intr_frame *f UNUSED) {$/;"	f	file:
serial_interrupt	devices/serial.c	/^static intr_handler_func serial_interrupt;$/;"	v	file:
serial_notify	devices/serial.c	/^serial_notify (void) {$/;"	f
serial_putc	devices/serial.c	/^serial_putc (uint8_t byte) {$/;"	f
set_serial	devices/serial.c	/^set_serial (int bps) {$/;"	f	file:
setup_page_table	threads/start.S	/^setup_page_table:$/;"	l
setup_stack	userprog/process.c	/^setup_stack (struct intr_frame *if_) {$/;"	f	file:
shifted_keymap	devices/kbd.c	/^static const struct keymap shifted_keymap[] = {$/;"	v	typeref:struct:keymap	file:
shuffle	tests/internal/list.c	/^shuffle (struct value *array, size_t cnt) $/;"	f	file:
shuffle	tests/internal/stdlib.c	/^shuffle (int *array, size_t cnt) $/;"	f	file:
shuffle	tests/lib.c	/^shuffle (void *buf_, size_t cnt, size_t size) $/;"	f
shuffle	tests/lib.pm	/^sub shuffle {$/;"	s
signal	devices/intq.c	/^signal (struct intq *q UNUSED, struct thread **waiter) {$/;"	f	file:
simple_thread_data	tests/threads/priority-fifo.c	/^struct simple_thread_data $/;"	s	file:
simple_thread_func	tests/threads/priority-fifo.c	/^simple_thread_func (void *data_) $/;"	f	file:
simple_thread_func	tests/threads/priority-fifo.c	/^static thread_func simple_thread_func;$/;"	v	file:
simple_thread_func	tests/threads/priority-preempt.c	/^simple_thread_func (void *aux UNUSED) $/;"	f	file:
simple_thread_func	tests/threads/priority-preempt.c	/^static thread_func simple_thread_func;$/;"	v	file:
size	include/threads/mmu.h	/^	uint16_t size;$/;"	m	struct:desc_ptr
size	threads/palloc.c	/^	uint32_t size;$/;"	m	struct:e820_entry	file:
size	threads/palloc.c	/^	uint64_t size;$/;"	m	struct:area	file:
size_t	include/lib/stddef.h	/^typedef __SIZE_TYPE__ size_t;$/;"	t
sleep_list	devices/timer.c	/^static struct list sleep_list;$/;"	v	typeref:struct:list	file:
sleep_test	tests/threads/alarm-simultaneous.c	/^struct sleep_test $/;"	s	file:
sleep_test	tests/threads/alarm-wait.c	/^struct sleep_test $/;"	s	file:
sleep_thread	tests/threads/alarm-wait.c	/^struct sleep_thread $/;"	s	file:
sleeper	tests/threads/alarm-simultaneous.c	/^sleeper (void *test_) $/;"	f	file:
sleeper	tests/threads/alarm-wait.c	/^sleeper (void *t_) $/;"	f	file:
smod64	lib/arithmetic.c	/^smod64 (int64_t n, int64_t d) {$/;"	f	file:
snprintf	lib/stdio.c	/^snprintf (char *buffer, size_t buf_size, const char *format, ...) {$/;"	f
sort	lib/stdlib.c	/^sort (void *array, size_t cnt, size_t size,$/;"	f
sort_chunks	tests/vm/page-merge-seq.c	/^sort_chunks (void)$/;"	f	file:
sort_chunks	tests/vm/parallel-merge.c	/^sort_chunks (const char *subprocess, int exit_status)$/;"	f	file:
sort_ready_list	threads/thread.c	/^void sort_ready_list (void) {$/;"	f
sprintf	include/lib/stdio.h	36;"	d
spt	include/threads/thread.h	/^	struct supplemental_page_table spt;$/;"	m	struct:thread	typeref:struct:thread::supplemental_page_table
spt_find_page	vm/vm.c	/^spt_find_page (struct supplemental_page_table *spt UNUSED, void *va UNUSED) {$/;"	f
spt_insert_page	vm/vm.c	/^spt_insert_page (struct supplemental_page_table *spt UNUSED,$/;"	f
spt_remove_page	vm/vm.c	/^spt_remove_page (struct supplemental_page_table *spt, struct page *page) {$/;"	f
ss	include/threads/interrupt.h	/^	uint16_t ss;$/;"	m	struct:intr_frame
ss	threads/interrupt.c	/^	unsigned ss : 16;         \/\/ segment selector$/;"	m	struct:gate	file:
start	filesys/inode.c	/^	disk_sector_t start;                \/* First data sector. *\/$/;"	m	struct:inode_disk	file:
start	tests/threads/alarm-simultaneous.c	/^    int64_t start;              \/* Current time at start of test. *\/$/;"	m	struct:sleep_test	file:
start	tests/threads/alarm-wait.c	/^    int64_t start;              \/* Current time at start of test. *\/$/;"	m	struct:sleep_test	file:
start	threads/loader.S	/^start:$/;"	l
start	threads/palloc.c	/^	uint64_t start;$/;"	m	struct:area	file:
start_time	tests/threads/mlfqs/mlfqs-fair.c	/^    int64_t start_time;$/;"	m	struct:thread_info	file:
start_time	tests/threads/mlfqs/mlfqs-load-60.c	/^static int64_t start_time;$/;"	v	file:
start_time	tests/threads/mlfqs/mlfqs-load-avg.c	/^static int64_t start_time;$/;"	v	file:
status	include/threads/thread.h	/^	enum thread_status status;          \/* Thread state. *\/$/;"	m	struct:thread	typeref:enum:thread::thread_status
strcat	include/lib/string.h	31;"	d
strchr	lib/string.c	/^strchr (const char *string, int c_) {$/;"	f
strcmp	lib/string.c	/^strcmp (const char *a_, const char *b_) {$/;"	f
strcpy	include/lib/string.h	29;"	d
strcspn	lib/string.c	/^strcspn (const char *string, const char *stop) {$/;"	f
strlcat	lib/string.c	/^strlcat (char *dst, const char *src, size_t size) {$/;"	f
strlcpy	lib/string.c	/^strlcpy (char *dst, const char *src, size_t size) {$/;"	f
strlen	lib/string.c	/^strlen (const char *string) {$/;"	f
strncat	include/lib/string.h	32;"	d
strncpy	include/lib/string.h	30;"	d
strnlen	lib/string.c	/^strnlen (const char *string, size_t maxlen) {$/;"	f
strpbrk	lib/string.c	/^strpbrk (const char *string, const char *stop) {$/;"	f
strrchr	lib/string.c	/^strrchr (const char *string, int c_) {$/;"	f
strspn	lib/string.c	/^strspn (const char *string, const char *skip) {$/;"	f
strstr	lib/string.c	/^strstr (const char *haystack, const char *needle) {$/;"	f
strtok	include/lib/string.h	33;"	d
strtok_r	lib/string.c	/^strtok_r (char *s, const char *delimiters, char **save_ptr) {$/;"	f
supplemental_page_table	include/vm/vm.h	/^struct supplemental_page_table {$/;"	s
supplemental_page_table_copy	vm/vm.c	/^supplemental_page_table_copy (struct supplemental_page_table *dst UNUSED,$/;"	f
supplemental_page_table_init	vm/vm.c	/^supplemental_page_table_init (struct supplemental_page_table *spt UNUSED) {$/;"	f
supplemental_page_table_kill	vm/vm.c	/^supplemental_page_table_kill (struct supplemental_page_table *spt UNUSED) {$/;"	f
swap	lib/kernel/list.c	/^swap (struct list_elem **a, struct list_elem **b) {$/;"	f	file:
swap	tests/lib.c	/^swap (void *a_, void *b_, size_t size) $/;"	f	file:
swap	tests/vm/qsort.c	/^swap (unsigned char *a, unsigned char *b) $/;"	f	file:
swap_byte	lib/random.c	/^swap_byte (uint8_t *a, uint8_t *b) {$/;"	f	file:
swap_byte	tests/arc4.c	/^swap_byte (uint8_t *a, uint8_t *b)$/;"	f	file:
swap_disk	vm/anon.c	/^static struct disk *swap_disk;$/;"	v	typeref:struct:disk	file:
swap_in	include/vm/vm.h	/^	bool (*swap_in) (struct page *, void *);$/;"	m	struct:page_operations
swap_in	include/vm/vm.h	79;"	d
swap_out	include/vm/vm.h	/^	bool (*swap_out) (struct page *);$/;"	m	struct:page_operations
swap_out	include/vm/vm.h	80;"	d
symlink	lib/user/syscall.c	/^symlink (const char* target, const char* linkpath) {$/;"	f
syscall	lib/user/syscall.c	/^static __inline int64_t syscall (uint64_t num_, uint64_t a1_, uint64_t a2_,$/;"	f	file:
syscall0	lib/user/syscall.c	34;"	d	file:
syscall1	lib/user/syscall.c	39;"	d	file:
syscall2	lib/user/syscall.c	44;"	d	file:
syscall3	lib/user/syscall.c	50;"	d	file:
syscall4	lib/user/syscall.c	56;"	d	file:
syscall5	lib/user/syscall.c	63;"	d	file:
syscall_entry	userprog/syscall-entry.S	/^syscall_entry:$/;"	l
syscall_handler	userprog/syscall.c	/^syscall_handler (struct intr_frame *f UNUSED) {$/;"	f
syscall_init	userprog/syscall.c	/^syscall_init (void) {$/;"	f
tail	include/devices/intq.h	/^	int tail;                   \/* Old data is read here. *\/$/;"	m	struct:intq
tail	include/lib/kernel/list.h	/^	struct list_elem tail;      \/* List tail. *\/$/;"	m	struct:list	typeref:struct:list::list_elem
task_state	include/userprog/tss.h	/^struct task_state {$/;"	s
tell	lib/user/syscall.c	/^tell (int fd) {$/;"	f
temp1	userprog/syscall-entry.S	/^temp1:$/;"	l
temp2	userprog/syscall-entry.S	/^temp2:$/;"	l
test	tests/internal/list.c	/^test (void) $/;"	f
test	tests/internal/stdio.c	/^test (void) $/;"	f
test	tests/internal/stdlib.c	/^test (void) $/;"	f
test	tests/threads/alarm-wait.c	/^    struct sleep_test *test;     \/* Info shared between all threads. *\/$/;"	m	struct:sleep_thread	typeref:struct:sleep_thread::sleep_test	file:
test	tests/threads/tests.c	/^struct test $/;"	s	file:
test_alarm_multiple	tests/threads/alarm-wait.c	/^test_alarm_multiple (void) $/;"	f
test_alarm_negative	tests/threads/alarm-negative.c	/^test_alarm_negative (void) $/;"	f
test_alarm_priority	tests/threads/alarm-priority.c	/^test_alarm_priority (void) $/;"	f
test_alarm_simultaneous	tests/threads/alarm-simultaneous.c	/^test_alarm_simultaneous (void) $/;"	f
test_alarm_single	tests/threads/alarm-wait.c	/^test_alarm_single (void) $/;"	f
test_alarm_zero	tests/threads/alarm-zero.c	/^test_alarm_zero (void) $/;"	f
test_func	tests/threads/tests.h	/^typedef void test_func (void);$/;"	t
test_main	tests/filesys/base/syn-read.c	/^test_main (void) $/;"	f
test_main	tests/filesys/base/syn-remove.c	/^test_main (void) $/;"	f
test_main	tests/filesys/base/syn-write.c	/^test_main (void) $/;"	f
test_main	tests/filesys/extended/dir-empty-name.c	/^test_main (void) $/;"	f
test_main	tests/filesys/extended/dir-mk-tree.c	/^test_main (void) $/;"	f
test_main	tests/filesys/extended/dir-mkdir.c	/^test_main (void) $/;"	f
test_main	tests/filesys/extended/dir-open.c	/^test_main (void) $/;"	f
test_main	tests/filesys/extended/dir-over-file.c	/^test_main (void) $/;"	f
test_main	tests/filesys/extended/dir-rm-cwd.c	/^test_main (void) $/;"	f
test_main	tests/filesys/extended/dir-rm-parent.c	/^test_main (void) $/;"	f
test_main	tests/filesys/extended/dir-rm-root.c	/^test_main (void) $/;"	f
test_main	tests/filesys/extended/dir-rm-tree.c	/^test_main (void) $/;"	f
test_main	tests/filesys/extended/dir-rmdir.c	/^test_main (void) $/;"	f
test_main	tests/filesys/extended/dir-under-file.c	/^test_main (void) $/;"	f
test_main	tests/filesys/extended/dir-vine.c	/^test_main (void) $/;"	f
test_main	tests/filesys/extended/grow-file-size.c	/^test_main (void) $/;"	f
test_main	tests/filesys/extended/grow-sparse.c	/^test_main (void) $/;"	f
test_main	tests/filesys/extended/grow-tell.c	/^test_main (void) $/;"	f
test_main	tests/filesys/extended/grow-two-files.c	/^test_main (void) $/;"	f
test_main	tests/filesys/extended/symlink-dir.c	/^test_main (void)$/;"	f
test_main	tests/filesys/extended/symlink-file.c	/^test_main (void)$/;"	f
test_main	tests/filesys/extended/symlink-link.c	/^test_main (void)$/;"	f
test_main	tests/filesys/extended/syn-rw.c	/^test_main (void) $/;"	f
test_main	tests/userprog/bad-jump.c	/^test_main (void) $/;"	f
test_main	tests/userprog/bad-jump2.c	/^test_main (void) $/;"	f
test_main	tests/userprog/bad-read.c	/^test_main (void) $/;"	f
test_main	tests/userprog/bad-read2.c	/^test_main (void) $/;"	f
test_main	tests/userprog/bad-write.c	/^test_main (void) $/;"	f
test_main	tests/userprog/bad-write2.c	/^test_main (void) $/;"	f
test_main	tests/userprog/child-bad.c	/^test_main (void) $/;"	f
test_main	tests/userprog/close-bad-fd.c	/^test_main (void) $/;"	f
test_main	tests/userprog/close-normal.c	/^test_main (void) $/;"	f
test_main	tests/userprog/close-twice.c	/^test_main (void) $/;"	f
test_main	tests/userprog/create-bad-ptr.c	/^test_main (void) $/;"	f
test_main	tests/userprog/create-bound.c	/^test_main (void) $/;"	f
test_main	tests/userprog/create-empty.c	/^test_main (void) $/;"	f
test_main	tests/userprog/create-exists.c	/^test_main (void) $/;"	f
test_main	tests/userprog/create-long.c	/^test_main (void) $/;"	f
test_main	tests/userprog/create-normal.c	/^test_main (void) $/;"	f
test_main	tests/userprog/create-null.c	/^test_main (void) $/;"	f
test_main	tests/userprog/exec-arg.c	/^test_main (void) $/;"	f
test_main	tests/userprog/exec-bad-ptr.c	/^test_main (void) $/;"	f
test_main	tests/userprog/exec-boundary.c	/^test_main (void) $/;"	f
test_main	tests/userprog/exec-missing.c	/^test_main (void) $/;"	f
test_main	tests/userprog/exec-once.c	/^test_main (void) $/;"	f
test_main	tests/userprog/exec-read.c	/^test_main (void) $/;"	f
test_main	tests/userprog/exit.c	/^test_main (void) $/;"	f
test_main	tests/userprog/fork-boundary.c	/^test_main (void) $/;"	f
test_main	tests/userprog/fork-close.c	/^test_main (void) $/;"	f
test_main	tests/userprog/fork-multiple.c	/^test_main (void) $/;"	f
test_main	tests/userprog/fork-once.c	/^test_main (void) $/;"	f
test_main	tests/userprog/fork-read.c	/^test_main (void) $/;"	f
test_main	tests/userprog/fork-recursive.c	/^test_main (void) $/;"	f
test_main	tests/userprog/halt.c	/^test_main (void) $/;"	f
test_main	tests/userprog/multi-child-fd.c	/^test_main (void) $/;"	f
test_main	tests/userprog/open-bad-ptr.c	/^test_main (void) $/;"	f
test_main	tests/userprog/open-boundary.c	/^test_main (void) $/;"	f
test_main	tests/userprog/open-empty.c	/^test_main (void) $/;"	f
test_main	tests/userprog/open-missing.c	/^test_main (void) $/;"	f
test_main	tests/userprog/open-normal.c	/^test_main (void) $/;"	f
test_main	tests/userprog/open-null.c	/^test_main (void) $/;"	f
test_main	tests/userprog/open-twice.c	/^test_main (void) $/;"	f
test_main	tests/userprog/read-bad-fd.c	/^test_main (void) $/;"	f
test_main	tests/userprog/read-bad-ptr.c	/^test_main (void) $/;"	f
test_main	tests/userprog/read-boundary.c	/^test_main (void) $/;"	f
test_main	tests/userprog/read-normal.c	/^test_main (void) $/;"	f
test_main	tests/userprog/read-stdout.c	/^test_main (void) $/;"	f
test_main	tests/userprog/read-zero.c	/^test_main (void) $/;"	f
test_main	tests/userprog/rox-simple.c	/^test_main (void) $/;"	f
test_main	tests/userprog/wait-bad-pid.c	/^test_main (void) $/;"	f
test_main	tests/userprog/wait-killed.c	/^test_main (void) $/;"	f
test_main	tests/userprog/wait-simple.c	/^test_main (void) $/;"	f
test_main	tests/userprog/wait-twice.c	/^test_main (void) $/;"	f
test_main	tests/userprog/write-bad-fd.c	/^test_main (void) $/;"	f
test_main	tests/userprog/write-bad-ptr.c	/^test_main (void) $/;"	f
test_main	tests/userprog/write-boundary.c	/^test_main (void) $/;"	f
test_main	tests/userprog/write-normal.c	/^test_main (void) $/;"	f
test_main	tests/userprog/write-stdin.c	/^test_main (void) $/;"	f
test_main	tests/userprog/write-zero.c	/^test_main (void) $/;"	f
test_main	tests/vm/child-inherit.c	/^test_main (void)$/;"	f
test_main	tests/vm/child-mm-wrt.c	/^test_main (void)$/;"	f
test_main	tests/vm/child-swap.c	/^test_main (void) $/;"	f
test_main	tests/vm/cow/cow-simple.c	/^test_main (void)$/;"	f
test_main	tests/vm/lazy-anon.c	/^test_main (void)$/;"	f
test_main	tests/vm/lazy-file.c	/^test_main (void)$/;"	f
test_main	tests/vm/mmap-bad-fd.c	/^test_main (void) $/;"	f
test_main	tests/vm/mmap-bad-fd2.c	/^test_main (void) $/;"	f
test_main	tests/vm/mmap-bad-fd3.c	/^test_main (void) $/;"	f
test_main	tests/vm/mmap-bad-off.c	/^test_main (void) $/;"	f
test_main	tests/vm/mmap-clean.c	/^test_main (void)$/;"	f
test_main	tests/vm/mmap-close.c	/^test_main (void)$/;"	f
test_main	tests/vm/mmap-exit.c	/^test_main (void)$/;"	f
test_main	tests/vm/mmap-inherit.c	/^test_main (void)$/;"	f
test_main	tests/vm/mmap-kernel.c	/^test_main (void) $/;"	f
test_main	tests/vm/mmap-misalign.c	/^test_main (void) $/;"	f
test_main	tests/vm/mmap-null.c	/^test_main (void) $/;"	f
test_main	tests/vm/mmap-off.c	/^test_main (void) $/;"	f
test_main	tests/vm/mmap-over-code.c	/^test_main (void) $/;"	f
test_main	tests/vm/mmap-over-data.c	/^test_main (void) $/;"	f
test_main	tests/vm/mmap-over-stk.c	/^test_main (void) $/;"	f
test_main	tests/vm/mmap-overlap.c	/^test_main (void)$/;"	f
test_main	tests/vm/mmap-read.c	/^test_main (void)$/;"	f
test_main	tests/vm/mmap-remove.c	/^test_main (void)$/;"	f
test_main	tests/vm/mmap-ro.c	/^test_main (void)$/;"	f
test_main	tests/vm/mmap-shuffle.c	/^test_main (void)$/;"	f
test_main	tests/vm/mmap-twice.c	/^test_main (void)$/;"	f
test_main	tests/vm/mmap-unmap.c	/^test_main (void)$/;"	f
test_main	tests/vm/mmap-write.c	/^test_main (void)$/;"	f
test_main	tests/vm/mmap-zero-len.c	/^test_main (void)$/;"	f
test_main	tests/vm/mmap-zero.c	/^test_main (void)$/;"	f
test_main	tests/vm/page-linear.c	/^test_main (void)$/;"	f
test_main	tests/vm/page-merge-mm.c	/^test_main (void) $/;"	f
test_main	tests/vm/page-merge-par.c	/^test_main (void) $/;"	f
test_main	tests/vm/page-merge-seq.c	/^test_main (void)$/;"	f
test_main	tests/vm/page-merge-stk.c	/^test_main (void) $/;"	f
test_main	tests/vm/page-parallel.c	/^test_main (void)$/;"	f
test_main	tests/vm/page-shuffle.c	/^test_main (void)$/;"	f
test_main	tests/vm/pt-bad-addr.c	/^test_main (void)$/;"	f
test_main	tests/vm/pt-bad-read.c	/^test_main (void)$/;"	f
test_main	tests/vm/pt-big-stk-obj.c	/^test_main (void)$/;"	f
test_main	tests/vm/pt-grow-bad.c	/^test_main (void)$/;"	f
test_main	tests/vm/pt-grow-stack.c	/^test_main (void)$/;"	f
test_main	tests/vm/pt-grow-stk-sc.c	/^test_main (void)$/;"	f
test_main	tests/vm/pt-write-code.c	/^test_main (void)$/;"	f
test_main	tests/vm/pt-write-code2.c	/^test_main (void)$/;"	f
test_main	tests/vm/swap-anon.c	/^test_main (void) $/;"	f
test_main	tests/vm/swap-file.c	/^test_main (void) $/;"	f
test_main	tests/vm/swap-fork.c	/^test_main (void) $/;"	f
test_main	tests/vm/swap-iter.c	/^test_main (void)$/;"	f
test_mlfqs_block	tests/threads/mlfqs/mlfqs-block.c	/^test_mlfqs_block (void) $/;"	f
test_mlfqs_fair	tests/threads/mlfqs/mlfqs-fair.c	/^test_mlfqs_fair (int thread_cnt, int nice_min, int nice_step)$/;"	f	file:
test_mlfqs_fair_2	tests/threads/mlfqs/mlfqs-fair.c	/^test_mlfqs_fair_2 (void) $/;"	f
test_mlfqs_fair_20	tests/threads/mlfqs/mlfqs-fair.c	/^test_mlfqs_fair_20 (void) $/;"	f
test_mlfqs_load_1	tests/threads/mlfqs/mlfqs-load-1.c	/^test_mlfqs_load_1 (void) $/;"	f
test_mlfqs_load_60	tests/threads/mlfqs/mlfqs-load-60.c	/^test_mlfqs_load_60 (void) $/;"	f
test_mlfqs_load_avg	tests/threads/mlfqs/mlfqs-load-avg.c	/^test_mlfqs_load_avg (void) $/;"	f
test_mlfqs_nice_10	tests/threads/mlfqs/mlfqs-fair.c	/^test_mlfqs_nice_10 (void) $/;"	f
test_mlfqs_nice_2	tests/threads/mlfqs/mlfqs-fair.c	/^test_mlfqs_nice_2 (void) $/;"	f
test_mlfqs_recent_1	tests/threads/mlfqs/mlfqs-recent-1.c	/^test_mlfqs_recent_1 (void) $/;"	f
test_name	tests/filesys/base/child-syn-read.c	/^const char *test_name = "child-syn-read";$/;"	v
test_name	tests/filesys/extended/child-syn-rw.c	/^const char *test_name = "child-syn-rw";$/;"	v
test_name	tests/lib.c	/^const char *test_name;$/;"	v
test_name	tests/threads/tests.c	/^static const char *test_name;$/;"	v	file:
test_name	tests/userprog/child-close.c	/^const char *test_name = "child-close";$/;"	v
test_name	tests/userprog/child-read.c	/^const char *test_name = "child-read";$/;"	v
test_name	tests/userprog/child-rox.c	/^const char *test_name = "child-rox";$/;"	v
test_name	tests/userprog/child-simple.c	/^const char *test_name = "child-simple";$/;"	v
test_name	tests/userprog/dup2/dup2-complex.c	/^const char *test_name = "dup2-complex";$/;"	v
test_name	tests/userprog/dup2/dup2-simple.c	/^const char *test_name = "dup2-simple";$/;"	v
test_name	tests/userprog/multi-recurse.c	/^const char *test_name = "multi-recurse";$/;"	v
test_name	tests/userprog/no-vm/multi-oom.c	/^const char *test_name = "multi-oom";$/;"	v
test_name	tests/vm/child-linear.c	/^const char *test_name = "child-linear";$/;"	v
test_name	tests/vm/child-qsort-mm.c	/^const char *test_name = "child-qsort-mm";$/;"	v
test_name	tests/vm/child-qsort.c	/^const char *test_name = "child-qsort";$/;"	v
test_name	tests/vm/child-sort.c	/^const char *test_name = "child-sort";$/;"	v
test_priority_change	tests/threads/priority-change.c	/^test_priority_change (void) $/;"	f
test_priority_condvar	tests/threads/priority-condvar.c	/^test_priority_condvar (void) $/;"	f
test_priority_donate_chain	tests/threads/priority-donate-chain.c	/^test_priority_donate_chain (void) $/;"	f
test_priority_donate_lower	tests/threads/priority-donate-lower.c	/^test_priority_donate_lower (void) $/;"	f
test_priority_donate_multiple	tests/threads/priority-donate-multiple.c	/^test_priority_donate_multiple (void) $/;"	f
test_priority_donate_multiple2	tests/threads/priority-donate-multiple2.c	/^test_priority_donate_multiple2 (void) $/;"	f
test_priority_donate_nest	tests/threads/priority-donate-nest.c	/^test_priority_donate_nest (void) $/;"	f
test_priority_donate_one	tests/threads/priority-donate-one.c	/^test_priority_donate_one (void) $/;"	f
test_priority_donate_sema	tests/threads/priority-donate-sema.c	/^test_priority_donate_sema (void) $/;"	f
test_priority_fifo	tests/threads/priority-fifo.c	/^test_priority_fifo (void) $/;"	f
test_priority_preempt	tests/threads/priority-preempt.c	/^test_priority_preempt (void) $/;"	f
test_priority_sema	tests/threads/priority-sema.c	/^test_priority_sema (void) $/;"	f
test_sleep	tests/threads/alarm-simultaneous.c	/^test_sleep (int thread_cnt, int iterations) $/;"	f	file:
test_sleep	tests/threads/alarm-wait.c	/^test_sleep (int thread_cnt, int iterations) $/;"	f	file:
tests	tests/threads/tests.c	/^static const struct test tests[] = $/;"	v	typeref:struct:test	file:
tf	include/threads/thread.h	/^	struct intr_frame tf;               \/* Information for switching *\/$/;"	m	struct:thread	typeref:struct:thread::intr_frame
thread	include/threads/thread.h	/^struct thread {$/;"	s
thread_block	threads/thread.c	/^thread_block (void) {$/;"	f
thread_create	threads/thread.c	/^thread_create (const char *name, int priority,$/;"	f
thread_current	threads/thread.c	/^thread_current (void) {$/;"	f
thread_exit	threads/thread.c	/^thread_exit (void) {$/;"	f
thread_func	include/threads/thread.h	/^typedef void thread_func (void *aux);$/;"	t
thread_get_load_avg	threads/thread.c	/^thread_get_load_avg (void) {$/;"	f
thread_get_nice	threads/thread.c	/^thread_get_nice (void) {$/;"	f
thread_get_priority	threads/thread.c	/^thread_get_priority (void) {$/;"	f
thread_get_recent_cpu	threads/thread.c	/^thread_get_recent_cpu (void) {$/;"	f
thread_info	tests/threads/mlfqs/mlfqs-fair.c	/^struct thread_info $/;"	s	file:
thread_init	threads/thread.c	/^thread_init (void) {$/;"	f
thread_launch	threads/thread.c	/^thread_launch (struct thread *th) {$/;"	f	file:
thread_mlfqs	threads/thread.c	/^bool thread_mlfqs;$/;"	v
thread_name	threads/thread.c	/^thread_name (void) {$/;"	f
thread_print_stats	threads/thread.c	/^thread_print_stats (void) {$/;"	f
thread_set_nice	threads/thread.c	/^thread_set_nice (int nice UNUSED) {$/;"	f
thread_set_priority	threads/thread.c	/^thread_set_priority (int new_priority) {$/;"	f
thread_start	threads/thread.c	/^thread_start (void) {$/;"	f
thread_status	include/threads/thread.h	/^enum thread_status {$/;"	g
thread_tests	threads/init.c	/^bool thread_tests;$/;"	v
thread_tick	threads/thread.c	/^thread_tick (void) {$/;"	f
thread_ticks	threads/thread.c	/^static unsigned thread_ticks;   \/* # of timer ticks since last yield. *\/$/;"	v	file:
thread_tid	threads/thread.c	/^thread_tid (void) {$/;"	f
thread_unblock	threads/thread.c	/^thread_unblock (struct thread *t) {$/;"	f
thread_yield	threads/thread.c	/^thread_yield (void) {$/;"	f
threads_SRC	threads/targets.mk	/^threads_SRC  = threads\/init.c		# Main program.$/;"	m
tick_count	tests/threads/mlfqs/mlfqs-fair.c	/^    int tick_count;$/;"	m	struct:thread_info	file:
ticks	devices/timer.c	/^static int64_t ticks;$/;"	v	file:
tid	include/threads/thread.h	/^	tid_t tid;                          \/* Thread identifier. *\/$/;"	m	struct:thread
tid_lock	threads/thread.c	/^static struct lock tid_lock;$/;"	v	typeref:struct:lock	file:
tid_t	include/threads/thread.h	/^typedef int tid_t;$/;"	t
timer_calibrate	devices/timer.c	/^timer_calibrate (void) {$/;"	f
timer_elapsed	devices/timer.c	/^timer_elapsed (int64_t then) {$/;"	f
timer_init	devices/timer.c	/^timer_init (void) {$/;"	f
timer_interrupt	devices/timer.c	/^static intr_handler_func timer_interrupt;$/;"	v	file:
timer_interrupt	devices/timer.c	/^timer_interrupt (struct intr_frame *args UNUSED) {$/;"	f	file:
timer_msleep	devices/timer.c	/^timer_msleep (int64_t ms) {$/;"	f
timer_nsleep	devices/timer.c	/^timer_nsleep (int64_t ns) {$/;"	f
timer_print_stats	devices/timer.c	/^timer_print_stats (void) {$/;"	f
timer_sleep	devices/timer.c	/^timer_sleep (int64_t ticks) {$/;"	f
timer_ticks	devices/timer.c	/^timer_ticks (void) {$/;"	f
timer_usleep	devices/timer.c	/^timer_usleep (int64_t us) {$/;"	f
tolower	include/lib/ctype.h	/^static inline int tolower (int c) { return isupper (c) ? c - 'A' + 'a' : c; }$/;"	f
too_many_loops	devices/timer.c	/^too_many_loops (unsigned loops) {$/;"	f	file:
total_sectors	filesys/fat.c	/^	unsigned int total_sectors;$/;"	m	struct:fat_boot	file:
toupper	include/lib/ctype.h	/^static inline int toupper (int c) { return islower (c) ? c - 'a' + 'A' : c; }$/;"	f
traverse_balanced	tests/Algorithm/Diff.pm	/^sub traverse_balanced$/;"	s
traverse_sequences	tests/Algorithm/Diff.pm	/^sub traverse_sequences$/;"	s
true	include/lib/stdbool.h	5;"	d
try_write	tests/userprog/child-rox.c	/^try_write (void) $/;"	f	file:
tss	userprog/tss.c	/^struct task_state *tss;$/;"	v	typeref:struct:task_state
tss_get	userprog/tss.c	/^tss_get (void) {$/;"	f
tss_init	userprog/tss.c	/^tss_init (void) {$/;"	f
tss_update	userprog/tss.c	/^tss_update (struct thread *next) {$/;"	f
turn_off_least_1bit	lib/kernel/hash.c	/^turn_off_least_1bit (size_t x) {$/;"	f	file:
txq	devices/serial.c	/^static struct intq txq;$/;"	v	typeref:struct:intq	file:
type	include/vm/uninit.h	/^	enum vm_type type;$/;"	m	struct:uninit_page	typeref:enum:uninit_page::vm_type
type	include/vm/vm.h	/^	enum vm_type type;$/;"	m	struct:page_operations	typeref:enum:page_operations::vm_type
type	lib/stdio.c	/^	} type;$/;"	m	struct:printf_conversion	typeref:enum:printf_conversion::__anon4	file:
type	threads/interrupt.c	/^	unsigned type : 4;        \/\/ type(STS_{TG,IG32,TG32})$/;"	m	struct:gate	file:
type	threads/palloc.c	/^	uint32_t type;$/;"	m	struct:e820_entry	file:
type	userprog/gdt.c	/^	unsigned type : 4;$/;"	m	struct:segment_desc	file:
type	userprog/gdt.c	/^	unsigned type : 4;$/;"	m	struct:segment_descriptor64	file:
udiv64	lib/arithmetic.c	/^udiv64 (uint64_t n, uint64_t d) {$/;"	f	file:
uint16_t	include/lib/stdint.h	/^typedef unsigned short int uint16_t;$/;"	t
uint32_t	include/lib/stdint.h	/^typedef unsigned int uint32_t;$/;"	t
uint64_t	include/lib/stdint.h	/^typedef unsigned long long int uint64_t;$/;"	t
uint8_t	include/lib/stdint.h	/^typedef unsigned char uint8_t;$/;"	t
uintmax_t	include/lib/stdint.h	/^typedef uint64_t uintmax_t;$/;"	t
uintptr_t	include/lib/stdint.h	/^typedef uint64_t uintptr_t;$/;"	t
umod64	lib/arithmetic.c	/^umod64 (uint64_t n, uint64_t d) {$/;"	f	file:
umount	lib/user/syscall.c	/^umount (const char *path) {$/;"	f
uninit	include/vm/vm.h	/^		struct uninit_page uninit;$/;"	m	union:page::__anon1	typeref:struct:page::__anon1::uninit_page
uninit_destroy	vm/uninit.c	/^uninit_destroy (struct page *page) {$/;"	f	file:
uninit_initialize	vm/uninit.c	/^uninit_initialize (struct page *page, void *kva) {$/;"	f	file:
uninit_new	vm/uninit.c	/^uninit_new (struct page *page, void *va, vm_initializer *init,$/;"	f
uninit_ops	vm/uninit.c	/^static const struct page_operations uninit_ops = {$/;"	v	typeref:struct:page_operations	file:
uninit_page	include/vm/uninit.h	/^struct uninit_page {$/;"	s
unshifted_keymap	devices/kbd.c	/^static const struct keymap unshifted_keymap[] = {$/;"	v	typeref:struct:keymap	file:
unused	filesys/inode.c	/^	uint32_t unused[125];               \/* Not used. *\/$/;"	m	struct:inode_disk	file:
usage	tests/filesys/extended/tar.c	/^usage (void) $/;"	f	file:
usage	threads/init.c	/^usage (void) {$/;"	f	file:
usage	utils/pintos-mkdisk	/^sub usage {$/;"	s
use_console_lock	lib/kernel/console.c	/^static bool use_console_lock;$/;"	v	file:
used_map	threads/palloc.c	/^	struct bitmap *used_map;        \/* Bitmap of free pages. *\/$/;"	m	struct:pool	typeref:struct:pool::bitmap	file:
user_page_limit	threads/palloc.c	/^size_t user_page_limit = SIZE_MAX;$/;"	v
user_pool	threads/palloc.c	/^static struct pool kernel_pool, user_pool;$/;"	v	typeref:struct:	file:
user_ticks	threads/thread.c	/^static long long user_ticks;    \/* # of timer ticks in user programs. *\/$/;"	v	file:
userprog_SRC	userprog/targets.mk	/^userprog_SRC  = userprog\/process.c	# Process loading.$/;"	m
va	include/vm/vm.h	/^	void *va;              \/* Address in terms of user space *\/$/;"	m	struct:page
va_arg	include/lib/stdarg.h	11;"	d
va_copy	include/lib/stdarg.h	12;"	d
va_end	include/lib/stdarg.h	10;"	d
va_list	include/lib/stdarg.h	/^typedef __builtin_va_list va_list;$/;"	t
va_start	include/lib/stdarg.h	9;"	d
validate_segment	userprog/process.c	/^validate_segment (const struct Phdr *phdr, struct file *file) {$/;"	f	file:
value	include/threads/synch.h	/^	unsigned value;             \/* Current value. *\/$/;"	m	struct:semaphore
value	tests/internal/list.c	/^    int value;                  \/* Item value. *\/$/;"	m	struct:value	file:
value	tests/internal/list.c	/^struct value $/;"	s	file:
value_less	tests/internal/list.c	/^value_less (const struct list_elem *a_, const struct list_elem *b_,$/;"	f	file:
vec_no	include/threads/interrupt.h	/^	uint64_t vec_no; \/* Interrupt vector number. *\/$/;"	m	struct:intr_frame
verify	tests/vm/page-merge-seq.c	/^verify (void)$/;"	f	file:
verify	tests/vm/parallel-merge.c	/^verify (void)$/;"	f	file:
verify_bsearch	tests/internal/stdlib.c	/^verify_bsearch (const int *array, size_t cnt) $/;"	f	file:
verify_list_bkwd	tests/internal/list.c	/^verify_list_bkwd (struct list *list, int size) $/;"	f	file:
verify_list_fwd	tests/internal/list.c	/^verify_list_fwd (struct list *list, int size) $/;"	f	file:
verify_order	tests/internal/stdlib.c	/^verify_order (const int *array, size_t cnt) $/;"	f	file:
vga_putc	devices/vga.c	/^vga_putc (int c) {$/;"	f
vhprintf	lib/user/console.c	/^vhprintf (int handle, const char *format, va_list args) {$/;"	f
vhprintf_aux	lib/user/console.c	/^struct vhprintf_aux {$/;"	s	file:
vm_SRC	vm/targets.mk	/^vm_SRC = vm\/vm.c          # Main api proxy$/;"	m
vm_alloc_page	include/vm/vm.h	104;"	d
vm_alloc_page_with_initializer	vm/vm.c	/^vm_alloc_page_with_initializer (enum vm_type type, void *upage, bool writable,$/;"	f
vm_anon_init	vm/anon.c	/^vm_anon_init (void) {$/;"	f
vm_claim_page	vm/vm.c	/^vm_claim_page (void *va UNUSED) {$/;"	f
vm_dealloc_page	vm/vm.c	/^vm_dealloc_page (struct page *page) {$/;"	f
vm_do_claim_page	vm/vm.c	/^vm_do_claim_page (struct page *page) {$/;"	f	file:
vm_evict_frame	vm/vm.c	/^vm_evict_frame (void) {$/;"	f	file:
vm_file_init	vm/file.c	/^vm_file_init (void) {$/;"	f
vm_get_frame	vm/vm.c	/^vm_get_frame (void) {$/;"	f	file:
vm_get_victim	vm/vm.c	/^vm_get_victim (void) {$/;"	f	file:
vm_handle_wp	vm/vm.c	/^vm_handle_wp (struct page *page UNUSED) {$/;"	f	file:
vm_init	vm/vm.c	/^vm_init (void) {$/;"	f
vm_initializer	include/vm/uninit.h	/^typedef bool vm_initializer (struct page *, void *aux);$/;"	t
vm_stack_growth	vm/vm.c	/^vm_stack_growth (void *addr UNUSED) {$/;"	f	file:
vm_try_handle_fault	vm/vm.c	/^vm_try_handle_fault (struct intr_frame *f UNUSED, void *addr UNUSED,$/;"	f
vm_type	include/vm/vm.h	/^enum vm_type {$/;"	g
vmsg	tests/lib.c	/^vmsg (const char *format, va_list args, const char *suffix) $/;"	f	file:
vprintf	lib/kernel/console.c	/^vprintf (const char *format, va_list args) {$/;"	f
vprintf	lib/user/console.c	/^vprintf (const char *format, va_list args) {$/;"	f
vprintf_helper	lib/kernel/console.c	/^vprintf_helper (char c, void *char_cnt_) {$/;"	f	file:
vsnprintf	lib/stdio.c	/^vsnprintf (char *buffer, size_t buf_size, const char *format, va_list args) {$/;"	f
vsnprintf_aux	lib/stdio.c	/^struct vsnprintf_aux {$/;"	s	file:
vsnprintf_helper	lib/stdio.c	/^vsnprintf_helper (char ch, void *aux_) {$/;"	f	file:
vsprintf	include/lib/stdio.h	37;"	d
vtop	include/threads/vaddr.h	53;"	d
wait	devices/intq.c	/^wait (struct intq *q UNUSED, struct thread **waiter) {$/;"	f	file:
wait	lib/user/syscall.c	/^wait (pid_t pid) {$/;"	f
wait_children	tests/lib.c	/^wait_children (pid_t pids[], size_t child_cnt) $/;"	f
wait_on_lock	include/threads/thread.h	/^	struct lock *wait_on_lock;$/;"	m	struct:thread	typeref:struct:thread::lock
wait_sema	tests/threads/alarm-priority.c	/^static struct semaphore wait_sema;$/;"	v	typeref:struct:semaphore	file:
wait_until_idle	devices/disk.c	/^wait_until_idle (const struct disk *d) {$/;"	f	file:
wait_while_busy	devices/disk.c	/^wait_while_busy (const struct disk *d) {$/;"	f	file:
waiters	include/threads/synch.h	/^	struct list waiters;        \/* List of waiting threads. *\/$/;"	m	struct:condition	typeref:struct:condition::list
waiters	include/threads/synch.h	/^	struct list waiters;        \/* List of waiting threads. *\/$/;"	m	struct:semaphore	typeref:struct:semaphore::list
wake_time	tests/threads/alarm-priority.c	/^static int64_t wake_time;$/;"	v	file:
wakeup_ticks	include/threads/thread.h	/^	int64_t wakeup_ticks;$/;"	m	struct:thread
width	lib/stdio.c	/^	int width;$/;"	m	struct:printf_conversion	file:
wrap_open	tests/filesys/extended/dir-rm-cwd.c	/^wrap_open (const char *name) $/;"	f	file:
write	lib/user/syscall.c	/^write (int fd, const void *buffer, unsigned size) {$/;"	f
write_cnt	devices/disk.c	/^	long long write_cnt;        \/* Number of sectors written. *\/$/;"	m	struct:disk	file:
write_cnt	lib/kernel/console.c	/^static int64_t write_cnt;$/;"	v	file:
write_header	tests/filesys/extended/tar.c	/^write_header (const char *file_name,$/;"	f	file:
write_ier	devices/serial.c	/^write_ier (void) {$/;"	f	file:
write_lock	filesys/fat.c	/^	struct lock write_lock;$/;"	m	struct:fat_fs	typeref:struct:fat_fs::lock	file:
write_msr	include/intrinsic.h	/^static __inline void write_msr(uint32_t ecx, uint64_t val) {$/;"	f
write_some_bytes	tests/filesys/extended/grow-two-files.c	/^write_some_bytes (const char *file_name, int fd, const char *buf, size_t *ofs) $/;"	f	file:
write_some_bytes	tests/filesys/extended/symlink-dir.c	/^write_some_bytes (const char *file_name, int fd, const char *buf, size_t *ofs)$/;"	f	file:
write_some_bytes	tests/filesys/extended/symlink-file.c	/^write_some_bytes (const char *file_name, int fd, const char *buf, size_t *ofs)$/;"	f	file:
write_some_bytes	tests/filesys/extended/symlink-link.c	/^write_some_bytes (const char *file_name, int fd, const char *buf, size_t *ofs)$/;"	f	file:
x	lib/stdio.c	/^	int x;                      \/* `x' character to use, for base 16 only. *\/$/;"	m	struct:integer_base	file:
x	tests/vm/mmap-over-data.c	/^static char x;$/;"	v	file:
yield_on_return	threads/interrupt.c	/^static bool yield_on_return;    \/* Should we yield on interrupt return? *\/$/;"	v	file:
zero	threads/intr-stubs.S	/^#define zero pushq $0;$/;"	d
zeros	tests/vm/mmap-off.c	/^static char zeros[0x1000];$/;"	v	file:
